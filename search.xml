<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ESP32-Linux环境搭建</title>
      <link href="/2021/09/17/ESP32-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/09/17/ESP32-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="ESP32-Linux环境搭建"><a href="#ESP32-Linux环境搭建" class="headerlink" title="ESP32-Linux环境搭建"></a>ESP32-Linux环境搭建</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc git wget make flex bison gperf python python-pip python-setuptools python-serial python-cryptography python-future python-pyparsing python-pyelftools libffi-dev libssl-dev</span><br><span class="line">mkdir -p ~/Tool/esp</span><br><span class="line">cd ~/Tool/esp</span><br><span class="line">wget https://dl.espressif.com/dl/xtensa-esp32-elf-gcc8_4_0-esp-2021r1-linux-amd64.tar.gz #64位</span><br><span class="line">wget https://dl.espressif.com/dl/xtensa-esp32-elf-gcc8_4_0-esp-2021r1-linux-i686.tar.gz #32位</span><br><span class="line">tar -xzf xtensa-esp32-elf-gcc8_4_0-esp-2021r1-linux-amd64.tar.gz #64位</span><br><span class="line">tar -xzf xtensa-esp32-elf-gcc8_4_0-esp-2021r1-linux-i686.tar.gz #32位</span><br><span class="line">git clone --recursive https://github.com/espressif/esp-idf.git</span><br><span class="line">sudo vim  ~/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias get_esp32=&#x27;export PATH=&quot;$HOME/Tool/esp/xtensa-esp32-elf/bin:$PATH&quot;</span><br><span class="line">export IDF_PATH=&quot;$HOME/Tool/esp/esp-idf&quot;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br><span class="line">get_esp32</span><br><span class="line">sudo apt install python-pip</span><br><span class="line">python -m pip install --user -r $IDF_PATH/requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
            <tag> Liunx </tag>
            
            <tag> ESP </tag>
            
            <tag> 搭建环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP8266-Linux环境搭建</title>
      <link href="/2021/09/17/ESP8266-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/09/17/ESP8266-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="ESP8266-Linux环境搭建"><a href="#ESP8266-Linux环境搭建" class="headerlink" title="ESP8266-Linux环境搭建"></a>ESP8266-Linux环境搭建</h1><h2 id="ESP8266-RTOS-SDK"><a href="#ESP8266-RTOS-SDK" class="headerlink" title="ESP8266_RTOS_SDK"></a>ESP8266_RTOS_SDK</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc git wget make libncurses-dev flex bison gperf python python-serial</span><br><span class="line">mkdir -p ~/Tool/esp</span><br><span class="line">cd ~/Tool/esp</span><br><span class="line">wget https://dl.espressif.com/dl/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz # 64位机</span><br><span class="line">wget https://dl.espressif.com/dl/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-i686.tar.gz # 32位机</span><br><span class="line">tar -xzf xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz # 64位机</span><br><span class="line">tar -xzf xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-i686.tar.gz # 32位机</span><br><span class="line">git clone --recursive https://github.com/espressif/ESP8266_RTOS_SDK.git</span><br><span class="line">sudo vim  ~/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias get_esp8266_rtos=&#x27;export PATH=&quot;$HOME/Tool/esp/xtensa-lx106-elf/bin:$PATH&quot;</span><br><span class="line">export IDF_PATH=&quot;$HOME/Tool/esp/ESP8266_RTOS_SDK&quot;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br><span class="line">get_esp8266_rtos</span><br><span class="line">sudo apt install python-pip</span><br><span class="line">python -m pip install --user -r $IDF_PATH/requirements.txt</span><br></pre></td></tr></table></figure><h2 id="ESP8266-NONOS-SDK"><a href="#ESP8266-NONOS-SDK" class="headerlink" title="ESP8266_NONOS_SDK"></a>ESP8266_NONOS_SDK</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc git wget make libncurses-dev flex bison gperf python python-serial</span><br><span class="line">mkdir -p ~/Tool/esp</span><br><span class="line">cd ~/Tool/esp</span><br><span class="line">wget https://dl.espressif.com/dl/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz # 64位机</span><br><span class="line">wget https://dl.espressif.com/dl/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-i686.tar.gz # 32位机</span><br><span class="line">tar -xzf xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz # 64位机</span><br><span class="line">tar -xzf xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-i686.tar.gz # 32位机</span><br><span class="line">git clone --recursive https://github.com/espressif/ESP8266_NONOS_SDK.git</span><br><span class="line">sudo vim  ~/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias get_esp8266_nonos=&#x27;export PATH=&quot;$HOME/Tool/esp/xtensa-lx106-elf/bin:$PATH&quot;</span><br><span class="line">export IDF_PATH=&quot;$HOME/Tool/esp/ESP8266_NONOS_SDK&quot;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br><span class="line">get_esp8266_nonos</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Liunx </tag>
            
            <tag> ESP </tag>
            
            <tag> 搭建环境 </tag>
            
            <tag> ESP8266 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AT24CXX系列读写算法</title>
      <link href="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/"/>
      <url>/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="AT24CXX系列读写算法"><a href="#AT24CXX系列读写算法" class="headerlink" title="AT24CXX系列读写算法"></a>AT24CXX系列读写算法</h1><h2 id="AT24CXX容量"><a href="#AT24CXX容量" class="headerlink" title="AT24CXX容量"></a>AT24CXX容量</h2><p>​AT24C01，AT24C02，AT24C04，AT24C08，AT24C16，AT24C32，AT24C64，AT24C128，AT24C256…不同的xxx代表不同的容量。</p><table><thead><tr><th align="center">型号</th><th align="center">bit容量</th><th align="center">Byte容量</th></tr></thead><tbody><tr><td align="center">AT24C01</td><td align="center">1Kbit</td><td align="center">128Byte</td></tr><tr><td align="center">AT24C02</td><td align="center">2Kbit</td><td align="center">256Byte</td></tr><tr><td align="center">AT24C04</td><td align="center">4Kbit</td><td align="center">512Byte</td></tr><tr><td align="center">AT24C08</td><td align="center">8Kbit</td><td align="center">1024Byte</td></tr><tr><td align="center">AT24C16</td><td align="center">16Kbit</td><td align="center">2048Byte</td></tr><tr><td align="center">AT24C32</td><td align="center">32Kbit</td><td align="center">4096Byte</td></tr><tr><td align="center">AT24C64</td><td align="center">64Kbit</td><td align="center">8192Byte</td></tr><tr><td align="center">AT24C128</td><td align="center">128Kbit</td><td align="center">16384Byte</td></tr><tr><td align="center">AT24C256</td><td align="center">256Kbit</td><td align="center">32768Byte</td></tr><tr><td align="center">AT24C512</td><td align="center">512Kbit</td><td align="center">65536Byte</td></tr><tr><td align="center">AT24C1024</td><td align="center">1024Kbit</td><td align="center">131072Byte</td></tr></tbody></table><h2 id="AT24CXX页与页内单元"><a href="#AT24CXX页与页内单元" class="headerlink" title="AT24CXX页与页内单元"></a>AT24CXX页与页内单元</h2><p>​总容量(Byte容量) &#x3D; 页数 × 页内字节单元数。</p><table><thead><tr><th align="center">AT24CXXX</th><th align="center">Byte容量</th><th align="center">页数</th><th align="center">页内字节单元数</th></tr></thead><tbody><tr><td align="center">AT24C01</td><td align="center">128Byte</td><td align="center">16页</td><td align="center">8Byte</td></tr><tr><td align="center">AT24C02</td><td align="center">256Byte</td><td align="center">32页</td><td align="center">8Byte</td></tr><tr><td align="center">AT24C04</td><td align="center">512Byte</td><td align="center">32页</td><td align="center">16Byte</td></tr><tr><td align="center">AT24C08</td><td align="center">1024Byte</td><td align="center">64页</td><td align="center">16Byte</td></tr><tr><td align="center">AT24C16</td><td align="center">2048Byte</td><td align="center">128页</td><td align="center">16Byte</td></tr><tr><td align="center">AT24C32</td><td align="center">4096Byte</td><td align="center">128页</td><td align="center">32Byte</td></tr><tr><td align="center">AT24C64</td><td align="center">8192Byte</td><td align="center">256页</td><td align="center">32Byte</td></tr><tr><td align="center">AT24C128</td><td align="center">16384Byte</td><td align="center">256页</td><td align="center">64Byte</td></tr><tr><td align="center">AT24C256</td><td align="center">32768Byte</td><td align="center">512页</td><td align="center">64Byte</td></tr><tr><td align="center">AT24C512</td><td align="center">65536Byte</td><td align="center">512页</td><td align="center">128Byte</td></tr><tr><td align="center">AT24C1024</td><td align="center">131072Byte</td><td align="center">512页</td><td align="center">256Byte</td></tr></tbody></table><h2 id="AT24CXX寻址方式"><a href="#AT24CXX寻址方式" class="headerlink" title="AT24CXX寻址方式"></a>AT24CXX寻址方式</h2><blockquote><p>不是IIC地址，是存储器内部寻址</p></blockquote><p>​对AT24CXXX进行读写操作时，都得先访问存储地址、比如AT24C01写一个字节的IIC时序：</p><p><img src="/.io//image-20210515212712435.png" alt="image-20210515212712435"></p><p>​先发送设备地址，收到应答后再发送需要写数据的地址(<strong>WORD ADDRESS</strong>)。AT24C01容量为128Byte则<strong>WORD ADDRESS</strong>只需要7bit就可以覆盖128Byte的数据地址。通俗的讲就是128Byte就占用了128个地址，一个7bit的数据范围为(0-127)刚好128，所以128Byte的字节地址需要一个7bit的数据来表示。<br>AT24CXXX 字节地址如下(*表示无效位):</p><table><thead><tr><th align="center">AT24CXXX</th><th align="center">页数</th><th align="center">页内字节单元数</th><th align="center">容量(Byte)</th><th align="center">WORD ADDRESS(占用bit数)</th><th align="center">WORD ADDRESS</th></tr></thead><tbody><tr><td align="center">AT24C01</td><td align="center">16页</td><td align="center">8Byte</td><td align="center">128Byte</td><td align="center">7bit</td><td align="center"><img src="/.io//image-20210515223134590.png" alt="image-20210515223134590"></td></tr><tr><td align="center">AT24C02</td><td align="center">32页</td><td align="center">8Byte</td><td align="center">256Byte</td><td align="center">8bit</td><td align="center"><img src="/.io//image-20210515223108768.png" alt="image-20210515223108768"></td></tr><tr><td align="center">AT24C04</td><td align="center">32页</td><td align="center">16Byte</td><td align="center">512Byte</td><td align="center">9bit</td><td align="center"><img src="/.io//image-20210515222957329.png" alt="image-20210515222957329"></td></tr><tr><td align="center">AT24C08</td><td align="center">64页</td><td align="center">16Byte</td><td align="center">1024Byte</td><td align="center">10bit</td><td align="center"><img src="/.io//image-20210515222919062.png" alt="image-20210515222919062"></td></tr><tr><td align="center">AT24C16</td><td align="center">128页</td><td align="center">16Byte</td><td align="center">2048Byte</td><td align="center">11bit</td><td align="center"><img src="/.io//image-20210515222847226.png" alt="image-20210515222847226"></td></tr><tr><td align="center">AT24C32</td><td align="center">128页</td><td align="center">32Byte</td><td align="center">4096Byte</td><td align="center">12bit</td><td align="center"><img src="/.io//image-20210515222744553.png" alt="image-20210515222744553"></td></tr><tr><td align="center">AT24C64</td><td align="center">256页</td><td align="center">32Byte</td><td align="center">8192Byte</td><td align="center">13bit</td><td align="center"><img src="/.io//image-20210515222708886.png" alt="image-20210515222708886"></td></tr><tr><td align="center">AT24C128</td><td align="center">256页</td><td align="center">64Byte</td><td align="center">16384Byte</td><td align="center">14bit</td><td align="center"><img src="/.io//image-20210515222504947.png" alt="image-20210515222504947"></td></tr><tr><td align="center">AT24C256</td><td align="center">512页</td><td align="center">64Byte</td><td align="center">32768Byte</td><td align="center">15bit</td><td align="center"><img src="/.io//image-20210515222424735.png" alt="image-20210515222424735"></td></tr><tr><td align="center">AT24C512</td><td align="center">512页</td><td align="center">128Byte</td><td align="center">65536Byte</td><td align="center">16bit</td><td align="center"><img src="/.io//image-20210515222327337.png" alt="image-20210515222327337"></td></tr><tr><td align="center">AT24C1024</td><td align="center">512页</td><td align="center">256Byte</td><td align="center">131072Byte</td><td align="center">17bit</td><td align="center"><img src="/.io//image-20210515222037349.png" alt="image-20210515222037349"></td></tr></tbody></table><h2 id="AT24CXX页地址与页内单元地址"><a href="#AT24CXX页地址与页内单元地址" class="headerlink" title="AT24CXX页地址与页内单元地址"></a>AT24CXX页地址与页内单元地址</h2><p>​比如AT24C256有512页每页64个字节，15bit的地址数据对其寻址，低6bit(D5-D0)为页内字节单元地址，高9bit(D14-D6)为页地址。</p><p>​如第16页开始写，则<strong>WORD ADDRESS</strong> &#x3D; 0x0400（000 0100 0000 0000)<br>​<strong>0</strong>：地址无效位<br>​<strong>000 0100 00</strong>：9位页地址<br>​<strong>00 0000</strong>：6位页内字节单元地址</p><p>页地址与页内偏移地址的关系如下图。</p><table><thead><tr><th align="center">AT24CXXX</th><th align="center">页数</th><th align="center">页内字节单元数</th><th align="center">容量(Byte)</th><th align="center">WORD ADDRESS(占用bit数)</th><th align="center">页地址|页内偏移地址</th></tr></thead><tbody><tr><td align="center">AT24C01</td><td align="center">16页</td><td align="center">8Byte</td><td align="center">128Byte</td><td align="center">7bit</td><td align="center"><img src="/.io//image-20210515223134590.png" alt="image-20210515223134590"></td></tr><tr><td align="center">AT24C02</td><td align="center">32页</td><td align="center">8Byte</td><td align="center">256Byte</td><td align="center">8bit</td><td align="center"><img src="/.io//image-20210515223108768.png" alt="image-20210515223108768"></td></tr><tr><td align="center">AT24C04</td><td align="center">32页</td><td align="center">16Byte</td><td align="center">512Byte</td><td align="center">9bit</td><td align="center"><img src="/.io//image-20210515222957329.png" alt="image-20210515222957329"></td></tr><tr><td align="center">AT24C08</td><td align="center">64页</td><td align="center">16Byte</td><td align="center">1024Byte</td><td align="center">10bit</td><td align="center"><img src="/.io//image-20210515222919062.png" alt="image-20210515222919062"></td></tr><tr><td align="center">AT24C16</td><td align="center">128页</td><td align="center">16Byte</td><td align="center">2048Byte</td><td align="center">11bit</td><td align="center"><img src="/.io//image-20210515222847226.png" alt="image-20210515222847226"></td></tr><tr><td align="center">AT24C32</td><td align="center">128页</td><td align="center">32Byte</td><td align="center">4096Byte</td><td align="center">12bit</td><td align="center"><img src="/.io//image-20210515222744553.png" alt="image-20210515222744553"></td></tr><tr><td align="center">AT24C64</td><td align="center">256页</td><td align="center">32Byte</td><td align="center">8192Byte</td><td align="center">13bit</td><td align="center"><img src="/.io//image-20210515222708886.png" alt="image-20210515222708886"></td></tr><tr><td align="center">AT24C128</td><td align="center">256页</td><td align="center">64Byte</td><td align="center">16384Byte</td><td align="center">14bit</td><td align="center"><img src="/.io//image-20210515222504947.png" alt="image-20210515222504947"></td></tr><tr><td align="center">AT24C256</td><td align="center">512页</td><td align="center">64Byte</td><td align="center">32768Byte</td><td align="center">15bit</td><td align="center"><img src="/.io//image-20210515222424735.png" alt="image-20210515222424735"></td></tr><tr><td align="center">AT24C512</td><td align="center">512页</td><td align="center">128Byte</td><td align="center">65536Byte</td><td align="center">16bit</td><td align="center"><img src="/.io//image-20210515222327337.png" alt="image-20210515222327337"></td></tr><tr><td align="center">AT24C1024</td><td align="center">512页</td><td align="center">256Byte</td><td align="center">131072Byte</td><td align="center">17bit</td><td align="center"><img src="/.io//image-20210515222037349.png" alt="image-20210515222037349"></td></tr></tbody></table><p>比如：</p><p>​<strong>AT24C01</strong>：</p><p>​16页：需要4bit寻址(2^4&#x3D;16)。</p><p>​8Byte：需要3bit寻址(2^3&#x3D;8)。</p><p>查看手册</p><p>​<strong>AT24C01</strong>字节寻址需一个7bit地址：</p><p><img src="/.io//image-20210515223533498.png" alt="image-20210515223533498"></p><p>​<strong>AT24C128</strong>字节寻址需一个14bit地址：</p><p><img src="/.io//image-20210515223654431.png" alt="image-20210515223654431"></p><p>​<strong>AT24C256</strong>字节寻址需一个15bit地址：</p><p><img src="/.io//image-20210515223815200.png" alt="image-20210515223815200"></p><p>​以此类推，其实就是上面总结的那张表。</p><h2 id="AT24CXX-IIC地址"><a href="#AT24CXX-IIC地址" class="headerlink" title="AT24CXX IIC地址"></a>AT24CXX IIC地址</h2><p>​IIC通信需要先向从设备发送设备地址，AT24CXX芯片上有A2、A1、A0引脚，通过这三个引脚我们就可以自定义AT24CXX芯片的通信地址。</p><p><img src="/.io//image-20210515224030810.png" alt="image-20210515224030810"></p><p>​地址构成如下(手册上都会有写)，比如A2、A1、A0接地，则IIC写地址为1010 0000（0xA0），读地址为1010 0001（0xA1）。当然，地址详情还是需要根据<strong>Datasheet</strong>来进行判断。</p><p><img src="/.io//image-20210515224250520.png" alt="image-20210515224250520"></p><h2 id="AT24CXX-数据的读写"><a href="#AT24CXX-数据的读写" class="headerlink" title="AT24CXX 数据的读写"></a>AT24CXX 数据的读写</h2><h3 id="按字节写"><a href="#按字节写" class="headerlink" title="按字节写"></a>按字节写</h3><p><img src="/.io//image-20210515212712435.png" alt="image-20210515212712435"></p><h3 id="按页写"><a href="#按页写" class="headerlink" title="按页写"></a>按页写</h3><p><img src="/.io//image-20210515224836911.png" alt="image-20210515224836911"></p><p>​示例：<br>​<img src="/.io//image-20210515225034409.png" alt="image-20210515225034409"></p><p>​内容为：给<strong>AT24C04</strong>的最后的两个字节里面写入<strong>0x54</strong>和<strong>0x53</strong>。</p><hr><p>​注意：<br>  往AT24CXXX中写数据时，每写一个Byte的数据页内地址+1，当前页写满后会重新覆盖掉这一页前面的数据，而不会自动跳转到下一页，但是读会自动翻页。</p><p><img src="/.io//image-20210515225558292.png" alt="image-20210515225558292"></p><h3 id="翻页写"><a href="#翻页写" class="headerlink" title="翻页写"></a>翻页写</h3><p>​翻页写其实就是执行一次下面的时序，也就是发送一次从机设备和字节地址最大就可以写入64字节的数据，如果要连写多页，就重新按照以下时序发送从机地址和字节地址。</p><p><img src="/.io//image-20210515225753490.png" alt="image-20210515225753490"></p><p>​即写满一页之后，还是需要手动翻页的，但是不需要重发<strong>Start</strong>和<strong>Stop</strong>了；</p><h3 id="按字节读"><a href="#按字节读" class="headerlink" title="按字节读"></a>按字节读</h3><p><img src="/.io//image-20210515230405346.png" alt="image-20210515230405346"></p><h3 id="顺序读"><a href="#顺序读" class="headerlink" title="顺序读"></a>顺序读</h3><p><img src="/.io//image-20210515230416559.png" alt="image-20210515230416559"></p><h3 id="随机读"><a href="#随机读" class="headerlink" title="随机读"></a>随机读</h3><p><img src="/.io//image-20210515230438061.png" alt="image-20210515230438061"></p><p>​示例：</p><p><img src="/.io//image-20210515230935593.png" alt="image-20210515230935593"></p><p>内容为：读取<strong>AT24C04</strong>的最后的两个字节，内容为<strong>0x54</strong>和<strong>0x53</strong>。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码地址为：<a href="https://github.com/xqyjlj/octo_at24cxx">xqyjlj&#x2F;octo_at24cxx: 八爪鱼驱动-AT24Cxx (github.com)</a></p><p>具体读写代码解析请看下一篇博文：<a href="#">Post not found: 八爪鱼驱动-AT24CXX</a></p>]]></content>
      
      
      <categories>
          
          <category> 芯片驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i2c </tag>
            
            <tag> 驱动 </tag>
            
            <tag> EEPROM </tag>
            
            <tag> iic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keil踩坑指南</title>
      <link href="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/"/>
      <url>/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="Keil踩坑指南"><a href="#Keil踩坑指南" class="headerlink" title="Keil踩坑指南"></a>Keil踩坑指南</h1><h2 id="Keil-Jlink闪退"><a href="#Keil-Jlink闪退" class="headerlink" title="Keil-Jlink闪退"></a>Keil-Jlink闪退</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Jlink版本和Keil的版本都过高，且由于Jlink为盗版，导致闪退。</p><p>具体为<strong>JLinkARM.dll</strong>这个插件搞鬼。</p><p><img src="/.io//204450uuy2lquzqy2ysiuq.png" alt="204450uuy2lquzqy2ysiuq"></p><p>这个插件的来源为</p><p><img src="/.io//2101134fursl3bf4fbzavf.png" alt="2101134fursl3bf4fbzavf"></p><p>也就是我们装Jlink驱动的时候，勾选了这个选项，而导致这个毒瘤插件进入Keil，以后安装插件的时候取消安装就可以了。</p><h3 id="解决措施"><a href="#解决措施" class="headerlink" title="解决措施"></a>解决措施</h3><ol><li><p>找到”Keil安装目录“\ARM\Segger</p><p><img src="/.io//image-20210511164245801.png" alt="image-20210511164245801"></p></li><li><p>下载老版Keil的驱动：<a href="https://xqyjlj.lanzoui.com/b0axo4dte">https://xqyjlj.lanzoui.com/b0axo4dte</a> ；密码:g1h7</p></li><li><p>将里面的驱动解压替换现在的驱动，重启Keil就可以解决了。</p></li></ol><h2 id="Cannot-load-driver-‘C-Keil-v5-ARM-Segger-JL2CM3-dll"><a href="#Cannot-load-driver-‘C-Keil-v5-ARM-Segger-JL2CM3-dll" class="headerlink" title="Cannot load driver ‘C:\Keil_v5\ARM\Segger\JL2CM3.dll"></a>Cannot load driver ‘C:\Keil_v5\ARM\Segger\JL2CM3.dll</h2><p><img src="/.io//image-20210511171003731.png" alt="image-20210511171003731"></p><h3 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h3><p>Jlink版本和Keil的版本都过高，且由于Jlink为盗版，导致闪退。</p><p>具体为<strong>JLinkARM.dll</strong>这个插件搞鬼。</p><p><img src="/.io//204450uuy2lquzqy2ysiuq.png" alt="204450uuy2lquzqy2ysiuq"></p><p>这个插件的来源为</p><p><img src="/.io//2101134fursl3bf4fbzavf.png" alt="2101134fursl3bf4fbzavf"></p><p>也就是我们装Jlink驱动的时候，勾选了这个选项，而导致这个毒瘤插件进入Keil，以后安装插件的时候取消安装就可以了。</p><h3 id="解决措施-1"><a href="#解决措施-1" class="headerlink" title="解决措施"></a>解决措施</h3><ol><li><p>找到”Keil安装目录“\ARM\Segger</p><p><img src="/.io//image-20210511164245801.png" alt="image-20210511164245801"></p></li><li><p>下载老版Keil的驱动：<a href="https://xqyjlj.lanzoui.com/b0axo4dte">https://xqyjlj.lanzoui.com/b0axo4dte</a> ；密码:g1h7</p></li><li><p>将里面的驱动解压替换现在的驱动，重启Keil就可以解决了。</p></li></ol><h2 id="Keil-使用-Astyle-自动格式化"><a href="#Keil-使用-Astyle-自动格式化" class="headerlink" title="Keil 使用 Astyle 自动格式化"></a>Keil 使用 Astyle 自动格式化</h2><h3 id="关于Astyle"><a href="#关于Astyle" class="headerlink" title="关于Astyle"></a>关于Astyle</h3><p>Astyle 的全称是Artistic Style的简称，是一个开源的源代码格式化工具，可以对C，C++，C#以及Java等编程语言的源代码进行缩进、格式化、美化。</p><p><strong>Home Page</strong>: <a href="http://astyle.sourceforge.net/">http://astyle.sourceforge.net/</a><br><strong>Project Page</strong>: <a href="http://sourceforge.net/projects/astyle/">http://sourceforge.net/projects/astyle/</a></p><h3 id="Astyle下载"><a href="#Astyle下载" class="headerlink" title="Astyle下载"></a>Astyle下载</h3><p><a href="https://sourceforge.net/projects/astyle/">https://sourceforge.net/projects/astyle/</a></p><p><a href="https://xqyjlj.lanzoui.com/b0axo50yh">https://xqyjlj.lanzoui.com/b0axo50yh</a> 密码:69tj</p><p>下载之后解压，推荐解压到Keil的安装目录，避免误删除。</p><p><img src="/.io//image-20210511200057051.png" alt="image-20210511200057051"></p><h3 id="创建菜单按钮"><a href="#创建菜单按钮" class="headerlink" title="创建菜单按钮"></a>创建菜单按钮</h3><p><img src="/.io//image-20210511195813214.png" alt="image-20210511195813214"></p><ol><li><p>创建应用 <strong>Astyle All</strong></p></li><li><p>选择<strong>Astyle</strong>路径</p></li><li><p>添加参数</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;$E*.c&quot; &quot;$E*.h&quot; --style=allman --indent=spaces=4 --indent-preproc-block --pad-header --pad-oper --unpad-paren --suffix=none --lineend=linux --convert-tabs --align-pointer=type --verbose</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;$E*.c&quot; &quot;$E*.h&quot; ##当前目录下所有的.c .h文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--style=allman </span><br><span class="line">--indent=spaces=4 </span><br><span class="line">--indent-preproc-block </span><br><span class="line">--pad-header </span><br><span class="line">--pad-oper </span><br><span class="line">--unpad-paren </span><br><span class="line">--suffix=none </span><br><span class="line">--lineend=linux </span><br><span class="line">--convert-tabs </span><br><span class="line">--align-pointer=type </span><br><span class="line">--verbose</span><br></pre></td></tr></table></figure><p>此为Astyle命令，具体含义请移步 <a href="http://astyle.sourceforge.net/astyle.html">http://astyle.sourceforge.net/astyle.html</a></p><p><img src="/.io//image-20210511202934229.png" alt="image-20210511202934229"></p></li><li><p>按下OK后，tool下就有以下按钮</p><p><img src="/.io//image-20210511202956867.png" alt="image-20210511202956867"></p></li><li><p>按下按钮之后，启动自动格式化（需要先保存文件）。</p><p><img src="/.io//image-20210511203057315.png" alt="image-20210511203057315"></p><p><img src="/.io//image-20210511203144916.png" alt="image-20210511203144916"></p></li><li><p>再增加一个应用<strong>Astyle Current</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!E --style=allman --indent=spaces=4 --indent-preproc-block --pad-header --pad-oper --unpad-paren --suffix=none --lineend=linux --convert-tabs --align-pointer=type --verbose</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!E    ##当前文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--style=allman </span><br><span class="line">--indent=spaces=4 </span><br><span class="line">--indent-preproc-block </span><br><span class="line">--pad-header </span><br><span class="line">--pad-oper </span><br><span class="line">--unpad-paren </span><br><span class="line">--suffix=none </span><br><span class="line">--lineend=linux </span><br><span class="line">--convert-tabs </span><br><span class="line">--align-pointer=type </span><br><span class="line">--verbose</span><br></pre></td></tr></table></figure><p><img src="/.io//image-20210511203208095.png" alt="image-20210511203208095"></p></li></ol><h2 id="Keil字体"><a href="#Keil字体" class="headerlink" title="Keil字体"></a>Keil字体</h2><p>   Keil默认字体本身不怎么好看。本人提供一些字体供大家下载。首选<strong>JetBrains Mono</strong>吧。<strong>Consolas YaHei hybrid</strong>要改设置，比较繁琐。</p><h3 id="JetBrains-Mono"><a href="#JetBrains-Mono" class="headerlink" title="JetBrains Mono"></a>JetBrains Mono</h3><ul><li><p>字体地址 ：<a href="https://www.jetbrains.com/lp/mono/">https://www.jetbrains.com/lp/mono/</a></p></li><li><p>安装方式</p><p><img src="/.io//image-20210511205514357.png" alt="image-20210511205514357"></p></li><li><p>字体预览</p><p><img src="/.io//image-20210511204632463.png" alt="image-20210511204632463"></p></li><li><p>下载地址</p><ul><li><a href="https://download.jetbrains.com/fonts/JetBrainsMono-2.225.zip?_ga=2.243489413.18516330.1620736840-1147192159.1615307884">https://download.jetbrains.com/fonts/JetBrainsMono-2.225.zip?_ga=2.243489413.18516330.1620736840-1147192159.1615307884</a></li><li><a href="https://xqyjlj.lanzoui.com/b0axo56va">https://xqyjlj.lanzoui.com/b0axo56va</a> 密码:38vm</li></ul></li></ul><h3 id="Consolas-YaHei-hybrid"><a href="#Consolas-YaHei-hybrid" class="headerlink" title="Consolas YaHei hybrid"></a>Consolas YaHei hybrid</h3><ul><li><p>安装方式</p><ul><li><p>打开Keil安装目录下的uv4文件夹，找到<strong>global.prop</strong>文件</p><p><img src="/.io//image-20210511205945676.png" alt="image-20210511205945676"></p></li><li><p>将font属性修改为<strong>Consolas YaHei hybrid</strong></p><p><img src="/.io//image-20210511210310839.png" alt="image-20210511210310839"></p></li></ul></li><li><p>字体预览</p><p><img src="/.io//image-20210511210347828.png" alt="image-20210511210347828"></p></li><li><p>下载地址： <a href="https://xqyjlj.lanzoui.com/b0axo56va">https://xqyjlj.lanzoui.com/b0axo56va</a> 密码:38vm</p></li></ul><h2 id="Keil设置"><a href="#Keil设置" class="headerlink" title="Keil设置"></a>Keil设置</h2><ul><li><p>编码：首选<strong>UTF-8</strong> （较高版本才会有）</p><p><img src="/.io//image-20210511210651302.png" alt="image-20210511210651302"></p></li><li><p>Tab大小：4</p><p><img src="/.io//image-20210511210741741.png" alt="image-20210511210741741"></p></li><li><p>自动补全</p><p><img src="/.io//image-20210511210821032.png" alt="image-20210511210821032"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 踩坑指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
            <tag> 工具 </tag>
            
            <tag> keil </tag>
            
            <tag> jlink </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
