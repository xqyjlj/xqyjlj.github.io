<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TriCore Class4,Tin3 Trap调试笔记</title>
      <link href="/2024/03/12/note-debug-tricore-trap-class4-tin3/"/>
      <url>/2024/03/12/note-debug-tricore-trap-class4-tin3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在一个基于 <code>TC397(TriCore)</code>板子的代码功能合并中，观察到以下现象：单独运行 <code>a</code> 功能或 <code>b</code> 功能时，系统均表现正常，无异常发生。然而，当尝试将这两个功能合并运行时，系统出现异常，触发 <code>Class4,Tin3</code> 陷阱。尽管栈回溯还原的现场显示正常，但异常仍在访问一个正常的结构体变量后发生。让我们正在深入分析这一合并运行时的异常行为。</p><h1 id="调试与步骤"><a href="#调试与步骤" class="headerlink" title="调试与步骤"></a>调试与步骤</h1><p>首先，根据手册描述，<code>DAE</code> 陷阱通常发生在内存系统报告的错误无法立即与当前执行的指令相关联时，这通常涉及外设或外部存储器返回的错误。触发 <code>DAE</code> 陷阱的情况包括数据存储操作导致的总线错误、高速缓存管理指令错误以及高速缓存行回写错误。</p><p><img src="/2024/03/12/note-debug-tricore-trap-class4-tin3/image-20240313140907551.png" alt="image-20240313140907551"></p><p>为了更精确地确定错误源，我们需要参考 <code>AURIX TC3xx</code> 的用户手册，其中提到了 <code>DATR</code> 寄存器。这个寄存器作为 <code>DAE</code> 陷阱的状态标志寄存器，为我们提供了关于 <code>DAE</code> 陷阱原因的信息。因此，在分析 <code>a</code> 和 <code>b</code> 功能合并运行时触发的 <code>Class4,Tin3</code> 陷阱时，我们需要重点检查 <code>DATR</code> 寄存器的状态，以进一步确定导致异常的具体原因。通过解读 <code>DATR</code> 寄存器的值，我们可以更好地理解这一异常行为，并据此制定相应的解决策略。</p><p><img src="/2024/03/12/note-debug-tricore-trap-class4-tin3/image-20240312175106205.png" alt="image-20240312175106205"></p><p>根据从 <code>DATR</code> 寄存器读取的数据可以得知，<code>CWE</code> 标志为 <code>1</code>，这表明本次 <code>DAE</code> 陷阱确实是由 <code>Cache</code> 回写操作引起的。既然问题涉及 <code>Cache</code>，那么下一步的关键是定位具体的异常地址。</p><p><img src="/2024/03/12/note-debug-tricore-trap-class4-tin3/image-20240313143008818.png" alt="image-20240313143008818"></p><p><code>DEADD</code> 寄存器用于存储 <code>MEM</code>、<code>ALN</code>、<code>DSE</code> 或 <code>DAE</code> 陷阱触发时的异常地址信息。通过读取 <code>DEADD</code> 寄存器的值，我们可以获得导致陷阱的具体内存地址。这一地址对于分析错误原因至关重要，因为它可以帮助我们确定是哪个内存位置在 <code>Cache</code> 回写时发生了问题。</p><p><img src="/2024/03/12/note-debug-tricore-trap-class4-tin3/image-20240312175938620.png" alt="image-20240312175938620"></p><p>拿到异常内存地址后，通过查询 <code>map</code> 文件，发现该地址指向一个 <code>const</code> 修饰的全局结构体变量。这确实是一个重要的线索，因为它暗示程序可能尝试修改了 <code>const</code> 类型的变量，进而在 <code>cache</code> 回写时引发了异常。</p><p><img src="/2024/03/12/note-debug-tricore-trap-class4-tin3/image-20240313143110102.png" alt="image-20240313143110102"></p><p>鉴于回写时修改现场已不可见，我们设置 <code>DCON0</code> 寄存器的 <code>DCBYP</code> 位为 1，关闭 <code>Cache</code> 以准确定位问题所在。</p><p><img src="/2024/03/12/note-debug-tricore-trap-class4-tin3/image-20240312181031483.png" alt="image-20240312181031483"></p><p>在无 <code>Cache</code> 的陷阱中，我们利用栈回溯迅速定位到修改 <code>const</code> 内存的代码。写代码的作者通过类型强制转换移除了 <code>const</code> 修饰符，进而对变量进行修改。在其测试用例中，由于数据量较小，<code>Cache</code> 尚未填满，因此未触发回写操作，从而产生了正常运行的假象。具体情形如下图所示：</p><img src="http://www.plantuml.com/plantuml/svg/RP11Ji9058RtdEA5lHTWuIbSkXbg5KoScZAOk4EZfIga4Y4MgGOI8uG4IboOGjlqClEcxSehE6G22SJLPDvyx_-_3AapWsYiUaMO3WOjN90gXOD3A9xMgGQa22KuDyf02gREwYO5THIe8N6pUbPX9SYIVjviyMGkkak-ia0pQ8q1EcxUT7wZ5eyjuVfPuWflces_qEc0HhIA3ZZuGAk_rrZUD9Rt6a_q6ZEDwotsZm8wTkQ7Ke473HvCyNEybL2Dudk4dPW7Cpb1Rv96BpXpvHLjAxzlgoqrnFTNoHnJo1j3OJ_l6A-N5zRcW_9kF_FzzErEz1QYFPVlafA8y1ffQCiMvIOU1zXSONIBGR2JV6IIIwMZm7NIq9OPOkNZyaSy9JneextWOSZZdl0Uqkv4CZmPYHl_3m00"><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>在 <code>TriCore</code> 架构中，<code>const</code> 数据通常存储在 <code>rodata</code> 段中，该段数据直接位于 <code>flash</code> 存储器中。当 <code>CPU</code> 通过 <code>cache</code> 读取 <code>rodata</code> 段数据时，如果非法修改了 <code>cache</code> 中的对应数据，虽然不会立即报错，但在后续的 <code>cache</code> 回写操作中，会触发 <code>DAE</code> 陷阱。这是因为 <code>cache</code> 与 <code>flash</code> 之间的数据一致性在回写时被破坏，导致硬件异常。因此，在编程时，必须严格遵守 <code>const</code> 变量的使用规则，避免对其进行非法修改。</p>]]></content>
      
      
      <categories>
          
          <category> 开发笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TriCore - Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AUTOSAR CP 编译器抽象层</title>
      <link href="/2024/03/11/AUTOSAR-CP-Compiler/"/>
      <url>/2024/03/11/AUTOSAR-CP-Compiler/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>本文章所参考的 AUTOSAR 标准为 4.4.0 版本</p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1>]]></content>
      
      
      <categories>
          
          <category> AUTOSAR </category>
          
          <category> AUTOSAR Common </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AUTOSAR CP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AUTOSAR-CP-OS-多核管理</title>
      <link href="/2024/03/07/AUTOSAR-CP-OS-%E5%A4%9A%E6%A0%B8%E7%AE%A1%E7%90%86/"/>
      <url>/2024/03/07/AUTOSAR-CP-OS-%E5%A4%9A%E6%A0%B8%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> AUTOSAR </category>
          
          <category> AUTOSAR System Services </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AUTOSAR CP </tag>
            
            <tag> BSW </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mbw性能优化笔记</title>
      <link href="/2024/02/27/note-perf-mbw/"/>
      <url>/2024/02/27/note-perf-mbw/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 开发笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dhrystone性能优化笔记</title>
      <link href="/2024/02/27/note-perf-dhrystone/"/>
      <url>/2024/02/27/note-perf-dhrystone/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 开发笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libc pthread_cancel详解</title>
      <link href="/2024/02/27/libc-pthread_cancel/"/>
      <url>/2024/02/27/libc-pthread_cancel/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> libc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> pthread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libc futex详解</title>
      <link href="/2024/02/27/libc-futex/"/>
      <url>/2024/02/27/libc-futex/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> libc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> syscall - ipc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AUTOSAR CP Wdg协议栈详解</title>
      <link href="/2024/02/26/AUTOSAR-CP-Wdg%E5%8D%8F%E8%AE%AE%E6%A0%88/"/>
      <url>/2024/02/26/AUTOSAR-CP-Wdg%E5%8D%8F%E8%AE%AE%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>本文章所参考的 AUTOSAR 标准为 4.4.0 版本</p></blockquote><h1 id="Watchdog-基本功能"><a href="#Watchdog-基本功能" class="headerlink" title="Watchdog 基本功能"></a>Watchdog 基本功能</h1><p><code>Watchdog</code>，即看门狗，其主要功能是在设备无人值守时，自动复位系统，确保系统持续稳定运行。这一功能对于关键安全系统至关重要，同时对于非关键安全系统也具有重要意义。</p><p>在实际应用中，由于硬件老化、外部电磁干扰等因素，软件在运行过程中可能出现不可预测的行为。若无看门狗机制，这些问题可能导致设备故障，特别是在恶劣环境如沙漠地带，将显著增加不必要的维护成本。</p><p>对于汽车而言，ECU 中的软件同样可能受到电磁干扰、高温等环境因素的影响，从而引发程序异常。然而，正是看门狗机制的存在，在关键时刻能够触发系统复位，及时将设备恢复到正常工作状态，有效防止潜在风险。</p><p>看门狗的实现方式主要有硬件看门狗和软件看门狗两种。硬件看门狗依赖硬件机制，通过定时器原理实现，软件仅负责启动定时器；而软件看门狗则完全由软件控制定时器的启动和更新。</p><h1 id="硬件看门狗"><a href="#硬件看门狗" class="headerlink" title="硬件看门狗"></a>硬件看门狗</h1><p>如上所述，硬件看门狗主要依赖自身的定时器来实现其功能，因此被俗称为“硬狗”。常见的硬件看门狗形式包括 <code>MCU</code> 内部自带的看门狗、<code>PMIC</code> 中内嵌的看门狗，以及外部的独立看门狗等。</p><p>在选择适合的硬件看门狗时，需根据系统的具体需求来决定，无法一概而论。不过，在使用硬件看门狗时，需特别注意以下两点：</p><ul><li><p>首先，要确保所选硬件看门狗的最大超时时间能满足系统的设计需求。如果超时时间设置过短，可能会导致系统的不稳定性，从而误触发看门狗机制。</p></li><li><p>其次，对于关键安全系统而言，通常要求看门狗一旦启动就不允许被关闭。此外，还需考虑系统上电后看门狗的默认状态。如果是默认启动看门狗，那么软件就需要在芯片上电后立即进行喂狗操作或重置看门狗。同时，还需要设计一种在刷件或调试软件前的物理关闭看门狗的动作。</p></li></ul><p>关于喂狗方式，硬件看门狗可以采用 <code>GPIO</code>、<code>IIC</code> 或 <code>SPI</code> 等通讯方式。由于不同的通讯方式对芯片的硬件资源有不同的要求，因此应选择相对简单可靠的通讯方式进行喂狗。</p><h1 id="软件看门狗"><a href="#软件看门狗" class="headerlink" title="软件看门狗"></a>软件看门狗</h1><p>软件看门狗，亦称为“软狗”，主要通过软件定时器实现其功能。虽然名为软件，但其时间基准仍依赖于硬件外设上的硬件定时器。</p><p>以 <code>ostick</code> 为例，我们利用它来计时。通过运行软狗监控的定时器任务，不断递减主程序计数器。其他任务则负责重置该定时器。若软件检测到主程序的定时器归零，这意味着其他任务未能正常执行，此时可以触发主动复位，实现看门狗功能。</p><p>在配置软件看门狗时，通常建议将运行软狗的主任务优先级设置得比被监控的任务高。当与硬件看门狗结合使用时，通常会将软狗的主任务与硬件看门狗的喂狗任务置于同一任务中，以确保两者之间的协调与同步。</p><p><img src="/2024/02/26/AUTOSAR-CP-Wdg%E5%8D%8F%E8%AE%AE%E6%A0%88/a.svg" alt="a"></p><p>在实际项目中，硬件看门狗（硬狗）和软件看门狗（软狗）通常结合使用，以提供更全面的系统监控和保护。如上图所示的实践案例中，<code>Task A、B、C</code> 的优先级均低于 <code>Task D</code>。如果仅在 <code>Task D</code> 中执行喂硬狗的操作，可能会出现其他任务挂死而系统仍正常运行的情况，因为硬狗无法检测到这些低优先级任务的故障。</p><p>为了避免这种情况，我们引入了软件看门狗机制。每个 <code>Task（A、B、C）</code>都维护一个计数器，用于监控其运行状态。这些计数器的重置值需要根据各自 <code>Task</code> 的最大运行时间及周期来合理设定。<code>Task D </code>则负责监控这些计数器的递减动作。</p><p>在运行过程中，如果所有 <code>Task</code> 的计数器在设定的重置时间内都不为零，意味着这些低优先级任务运行正常。此时，<code>Task D</code> 可以通过 <code>GPIO</code>、<code>IIC</code> 或 <code>SPI</code> 等接口正常执行喂硬狗操作，保持硬狗处于激活状态。然而，如果任意计数器的值为零，说明有 <code>Task</code> 挂死或出现异常。在这种情况下，系统需要停止喂硬狗或主动触发复位行为，以确保系统的安全性和稳定性。</p><p>通过这种方式，软件看门狗和硬件看门狗协同工作，共同监控系统的运行状态。软狗负责监控低优先级任务，而硬狗则提供额外的安全保障。这种双重监控机制能够更全面地保护系统，减少因任务故障而导致的系统崩溃风险。</p><h1 id="AUTOSAR-CP-Wdg-协议栈"><a href="#AUTOSAR-CP-Wdg-协议栈" class="headerlink" title="AUTOSAR-CP-Wdg 协议栈"></a>AUTOSAR-CP-Wdg 协议栈</h1><p>考虑到软狗与硬狗结合的应用场景，<code>AUTOSAR</code> 架构已将其标准化并整合于整个 <code>Watchdog</code> 协议栈中</p><p><img src="/2024/02/26/AUTOSAR-CP-Wdg%E5%8D%8F%E8%AE%AE%E6%A0%88/image-20240226150620949.png" alt="image-20240226150620949"></p><p>如图 3 所示，在 <code>AUTOSAR</code> 架构下，<code>Watchdog</code> 协议栈主要包含三个软件模块：</p><ul><li><code>Watchdog Driver</code>：该模块负责实现对硬件看门狗的寄存器操作与控制。这包括 <code>MCU</code> 内部看门狗（<code>Internal Watchdog</code>）和外部看门狗（<code>External Watchdog</code>）。对于外部看门狗，可以通过 <code>GPIO</code>、<code>IIC</code> 或 <code>SPI</code> 等接口进行喂狗操作。</li><li><code>Watchdog Interface</code>：作为 <code>Watchdog Stack</code> 的关键组成部分，<code>Watchdog Interface</code> 的主要职责是连接上层的 <code>Watchdog Manager</code> 与底层的 <code>Watchdog Driver</code>。值得一提的是，它可以与多个底层 <code>Watchdog Driver</code> 进行连接，这在多核设计中尤为常见。</li><li><code>Watchdog Manager</code>：作为服务层的核心，<code>Watchdog Manager</code> 的主要功能是确保整个程序执行的正确性，并触发相应的硬件看门狗喂狗动作。它在整个监控体系中扮演了至关重要的角色。</li></ul><p>通过上述三个模块的协同工作，<code>AUTOSAR</code> 架构下的 <code>Watchdog</code> 协议栈得以实现其功能。为确保大家对每个模块有深入的理解，以下提供了 <code>Watchdog</code> 协议栈各部分的讲解链接，供您深入学习：</p><ul><li><a href="/2024/02/23/AUTOSAR-CP-Wdg/" title="AUTOSAR CP Watchdog Driver模块详解">Watchdog Driver 模块详解</a></li><li><a href="/2024/02/23/AUTOSAR-CP-WdgIf/" title="AUTOSAR CP Watchdog Interface模块详解">Watchdog Interface 模块详解</a></li><li><a href="/2024/02/23/AUTOSAR-CP-WdgM/" title="AUTOSAR CP Watchdog Manager模块详解">Watchdog Manager 模块详解</a></li></ul><p>点击相应链接，深入了解每个模块的工作原理、应用场景及最佳实践。这将帮助您更好地将 <code>Watchdog</code> 协议栈应用于实际项目中，提升系统的稳定性与可靠性。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.zhihu.com/tardis/zm/art/651467544?source_id=1005">https://www.zhihu.com/tardis/zm/art/651467544?source_id=1005</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> AUTOSAR </category>
          
          <category> AUTOSAR 协议栈解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AUTOSAR CP </tag>
            
            <tag> BSW </tag>
            
            <tag> Wdg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AUTOSAR CP Watchdog Driver模块详解</title>
      <link href="/2024/02/23/AUTOSAR-CP-Wdg/"/>
      <url>/2024/02/23/AUTOSAR-CP-Wdg/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>本文章所参考的 AUTOSAR 标准为 4.4.0 版本</p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>该模块具备初始化硬件看门狗、调整操作模式以及设定触发喂狗机制等功能。看门狗可根据其位置分为内部与外部两种类型，其中，内置于芯片内的称为内部看门狗，而外置的则称为外部看门狗。</p><p>无论是内部还是外部看门狗，<code>Watchdog Driver</code> 所使用的 <code>API</code> 都应保持统一。内部看门狗驱动属于 <code>MCAL</code> 层，而外部看门狗则属于 <code>ECU</code> 硬件抽象层。对于外部看门狗，其驱动需依赖 MCAL 中的其他驱动，如 <code>GPIO</code>、<code>IIC</code> 或 <code>SPI</code> 等，以执行喂狗操作。</p><h1 id="内部看门狗"><a href="#内部看门狗" class="headerlink" title="内部看门狗"></a>内部看门狗</h1><p>内部看门狗作为芯片内置的硬件监控机制，其驱动通常由芯片厂商提供。在使用前，务必确认其复位动作类型，避免冷复位或复位不完全等情形，以确保其能有效实现安全监控。然而，由于内部看门狗与芯片硬件紧密相关，若芯片本身存在硬件故障，可能会导致内部看门狗失效，从而陷入自保困境。因此，在关键安全系统中，单纯依赖内部看门狗可能不足以确保功能安全，此时需结合外部看门狗来共同保障系统的稳定运行。</p><h1 id="外部看门狗"><a href="#外部看门狗" class="headerlink" title="外部看门狗"></a>外部看门狗</h1><p>外部看门狗独立于受保护的芯片，可以是专门的硬件看门狗设备，通常达到 QM 等级。另一种类型是集成在 <code>PMIC</code> 内部的看门狗，这类设备通常能满足 <code>ASIL B</code> 或 <code>ASIL D</code> 功能安全等级的要求。在关键安全系统中，外部看门狗通常是必不可少的，它对于保障系统稳定性至关重要。相比之下，内部看门狗虽然有其作用，但在确保系统安全方面，外部看门狗显得更为重要。</p><h1 id="看门狗控制模式"><a href="#看门狗控制模式" class="headerlink" title="看门狗控制模式"></a>看门狗控制模式</h1><p>在 <code>AUTOSAR</code> 架构中，<code>Watchdog</code> 针对看门狗控制模式定义了以下三种模式：</p><ul><li><code>Off Mode(WDGIF_OFF_MODE)</code>：代表看门狗关闭状态。对于关键安全系统，此模式通常不可用，即看门狗一旦被激活，就不能被关闭。</li><li><code>Slow Mode(WDGIF_SLOW_MODE)</code>：适用于系统启动初始化过程，提供较长的喂狗窗口时间。</li><li><code>Fast Mode(WDGIF_FAST_MODE)</code>：是系统正常运行时的标准喂狗模式，具有较短的喂狗窗口时间。</li></ul><h1 id="看门狗喂狗时序"><a href="#看门狗喂狗时序" class="headerlink" title="看门狗喂狗时序"></a>看门狗喂狗时序</h1><p>在 <code>Watchdog</code> 的操作过程中，存在三个关键的函数调用场景，分别对应于 <code>Watchdog</code> 的初始化、触发喂狗动作以及模式变更。</p><ul><li><code>Watchdog</code> 初始化：此过程通过 <code>EcuM（Electronic Control Unit Manager）</code>模块发起，调用 <code>Wdg_Init</code> 函数来完成 <code>Watchdog</code> 的初始化配置。这一步骤确保了看门狗在启动时就处于正确的配置状态，为后续操作提供了基础。</li><li>触发看门狗喂狗：当系统需要在特定条件下喂狗时，通过 <code>WdgM（Watchdog Manager）</code>模块调用 <code>WdgIf（Watchdog Interface）</code>模块提供的 <code>WdgIf_SetTriggerCondition</code> 函数。这一函数的作用是设置触发条件，当这些条件满足时，将触发底层驱动执行喂狗动作，确保看门狗不会因超时而触发复位。</li><li>改变看门狗模式：随着系统运行状态的变化，可能需要对看门狗的模式进行调整。这同样通过 <code>WdgM</code> 模块实现，调用 <code>WdgIf</code> 模块提供的 <code>WdgIf_SetMode</code> 函数来完成模式变更。通过此函数，系统可以在 <code>Slow Mode</code>（慢模式）和 <code>Fast Mode</code>（快模式）之间切换，以适应不同的运行场景。</li></ul><p>这些函数调用场景共同构成了看门狗喂狗的时序逻辑，确保了看门狗在系统中的有效性和安全性。</p><p><img src="/2024/02/23/AUTOSAR-CP-Wdg/image-20240226112708296.png" alt="image-20240226112708296"></p><p>如下图所示，展示了 <code>Wathdog</code> 抽象层（<code>WdgIf</code>）与底层看门狗硬件之间的交互时序。从图中可以看出，当 <code>WdgIf</code> 模块需要触发喂狗动作时，它会调用<code>WdgIf_SetTriggerCondition</code>函数。这个函数是 <code>WdgIf</code> 模块提供的接口，用于设置触发喂狗的条件。</p><p>在<code>WdgIf_SetTriggerCondition</code>函数内部，它会继续调用底层 <code>Wdg</code> 驱动中的 <code>Wdg_SetTriggerCondition</code> 函数。这个底层函数直接与硬件交互，负责实现具体的喂狗动作。通过调用 <code>Wdg_SetTriggerCondition</code>函数，看门狗硬件会根据设定的条件执行喂狗操作，从而防止因超时而导致的系统复位。</p><p>这种交互时序确保了看门狗机制的有效性和可靠性。通过 <code>WdgIf</code> 模块与底层 <code>Wdg</code> 驱动的协同工作，系统能够在需要时及时触发喂狗动作，保持看门狗的运行状态，从而防止因系统故障而导致的意外复位。这对于关键安全系统来说尤为重要，能够确保系统的稳定性和安全性。</p><p><img src="/2024/02/23/AUTOSAR-CP-Wdg/image-20240226112921235.png" alt="image-20240226112921235"></p><h1 id="API-列表"><a href="#API-列表" class="headerlink" title="API 列表"></a>API 列表</h1><table><thead><tr><th>函数名</th><th>函数功能</th></tr></thead><tbody><tr><td><strong>Wdg_Init</strong></td><td>初始化看门狗</td></tr><tr><td><strong>Wdg_SetMode</strong></td><td>设置看门狗模式，模式可分为：<br>- <code>WDGIF_OFF_MODE</code><br>- <code>WDGIF_SLOW_MODE</code><br>- <code>WDGIF_FAST_MODE</code></td></tr><tr><td><strong>Wdg_SetTriggerCondition</strong></td><td>设置看门狗触发计数器的超时值</td></tr><tr><td><strong>Wdg_GetVersionInfo</strong></td><td>返回 <code>Wdg</code> 模块的版本信息</td></tr></tbody></table><h1 id="软件实现"><a href="#软件实现" class="headerlink" title="软件实现"></a>软件实现</h1><p>待更新</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.zhihu.com/tardis/zm/art/651467544?source_id=1005">https://www.zhihu.com/tardis/zm/art/651467544?source_id=1005</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> AUTOSAR </category>
          
          <category> AUTOSAR Microcontroller Drivers </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AUTOSAR CP </tag>
            
            <tag> BSW </tag>
            
            <tag> Wdg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AUTOSAR CP Watchdog Interface模块详解</title>
      <link href="/2024/02/23/AUTOSAR-CP-WdgIf/"/>
      <url>/2024/02/23/AUTOSAR-CP-WdgIf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>本文章所参考的 AUTOSAR 标准为 4.4.0 版本</p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Watchdog Interface</code>（简称<code> Watchdog If</code>）模块作为底层 <code>Watchdog Driver</code> 的抽象层，旨在实现底层硬件与上层软件之间的解耦。它的核心功能是提供一个统一的接口，使得上层 <code>Watchdog Manager</code> 能够与底层看门狗驱动进行交互，而无需关心底层驱动的具体实现细节。</p><p><code>Watchdog If</code> 模块并不负责底层看门狗驱动的特性设置，如窗口控制、时间周期等。这些特性的配置和管理仍然由底层的 <code>Watchdog Driver</code> 负责。<code>Watchdog If</code> 仅作为中介，确保上层 <code>Manager</code> 与底层 <code>Driver</code> 之间的通信顺畅。</p><p>当多个看门狗驱动被上层 <code>Watchdog Manager</code> 管理时，<code>Watchdog If</code> 模块通过 <code>DeviceIndex</code> 来区分和识别不同的驱动。如果在交互过程中出现错误，<code>Watchdog If</code> 模块将负责及时上报，确保系统能够作出相应的响应和处理。</p><p>总之，<code>Watchdog If</code> 模块在 <code>AUTOSAR</code> 架构的 <code>Watchdog</code> 协议栈中扮演着关键角色，它确保了底层硬件与上层软件之间的顺畅通信，提高了系统的可维护性和可扩展性。</p><h1 id="API-列表"><a href="#API-列表" class="headerlink" title="API 列表"></a>API 列表</h1><table><thead><tr><th>函数名</th><th>函数功能</th></tr></thead><tbody><tr><td><strong>WdgIf_SetMode</strong></td><td>设置看门狗模式，模式可分为：<br>- <code>WDGIF_OFF_MODE</code><br>- <code>WDGIF_SLOW_MODE</code><br>- <code>WDGIF_FAST_MODE</code></td></tr><tr><td><strong>WdgIf_SetTriggerCondition</strong></td><td>设置看门狗触发计数器的超时时间值</td></tr><tr><td><strong>WdgIf_GetVersionInfo</strong></td><td>返回 <code>WdgIf</code> 模块的版本信息</td></tr></tbody></table><h1 id="软件实现"><a href="#软件实现" class="headerlink" title="软件实现"></a>软件实现</h1><p>待更新</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.zhihu.com/tardis/zm/art/651467544?source_id=1005">https://www.zhihu.com/tardis/zm/art/651467544?source_id=1005</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> AUTOSAR </category>
          
          <category> AUTOSAR Onboard Device  Abstraction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AUTOSAR CP </tag>
            
            <tag> BSW </tag>
            
            <tag> Wdg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AUTOSAR CP Watchdog Manager模块详解</title>
      <link href="/2024/02/23/AUTOSAR-CP-WdgM/"/>
      <url>/2024/02/23/AUTOSAR-CP-WdgM/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>本文章所参考的 AUTOSAR 标准为 4.4.0 版本</p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Watchdog Manager</code> 在 <code>AUTOSAR</code> 架构中扮演着应用层软狗机制的角色，负责监控被称为“监控实体”的对象。其监控方式涵盖以下三种：</p><ul><li><code>Alive Supervision</code>：专门监控周期性任务是否按预期周期性运行，确保任务没有遗漏或延迟执行。</li><li><code>Deadline Supervision</code>：关注事件型任务的执行时间，确保任务在规定的时间内完成，防止任务超时导致的系统不稳定。</li><li><code>Logical Supervision</code>：用于监控任务的执行时序，保证任务之间的依赖关系和执行顺序正确无误。</li></ul><p>为了实施这些监控机制，每个监控实体都会设置相应的 <code>Checkpoint</code>。一个监控实体可以有一个或多个 <code>Checkpoint</code>，这些 <code>Checkpoint</code> 及其转换关系在单个实体内部被称为内图，而涉及不同监控实体的 <code>Checkpoint</code> 及其关系则构成外图。</p><p>具体应用中，一个监控实体可能会采用上述三种监控机制中的一种、多种或全部，这完全取决于实际应用场景和需求。基于这些监控机制的结果，每个监控实体都会计算出一个被称为 <code>Local Status</code> 的本地状态。</p><p>最终，当所有监控实体的状态被确定后，<code>Watchdog Manager</code> 可以综合这些信息，得出整个 <code>MCU</code> 的监控结果，即 <code>Global Status</code>。这一全局状态为系统提供了关于其整体运行状况的全面视图，有助于及时发现并处理问题，确保系统的稳定运行。</p><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><ul><li><p><code>S1</code>：<code>Watchdog Manager</code> 模块通过与 <code>Watchdog Interface（Watchdog If）</code>和 <code>Watchdog Driver</code> 的交互来设置看门狗喂狗的触发条件。这一触发条件通常由 <code>Watchdog Manager</code> 的函数接口来重置 <code>Watchdog Driver</code> 中的 <code>Counter</code> 值。</p></li><li><p><code>S2</code>：在系统运行过程中，<code>Watchdog Driver</code> 会持续监控 <code>Counter</code> 的值。若 <code>Counter</code> 不为 0，表示系统仍在正常运行范围内，<code>Watchdog Driver</code> 会进行一次喂狗操作，并将 <code>Counter</code> 值减一。</p></li><li><p><code>S3</code>：如果 <code>Counter</code> 值没有被 <code>Watchdog Manager</code> 及时重置，它将逐渐减少至 0。一旦 <code>Counter</code> 值到达 0，<code>Watchdog Driver</code> 将停止喂狗，此时看门狗会触发系统复位操作，以恢复系统的正常运行。如果系统恢复正常，流程将回到 <code>S2</code> 继续执行。</p></li></ul><p>在特殊情况下，如果触发条件不满足，导致无法正常喂狗，存在两种复位方式可供选择：</p><ul><li>等待看门狗超时复位：在这种情况下，<code>Watchdog Driver</code> 会停止喂狗，并等待看门狗超时后自动触发系统复位。</li><li>主动立即触发系统复位：当 <code>Watchdog Manager</code> 检测到严重错误时，它可以主动触发系统立即复位，以避免潜在的系统崩溃或数据损坏。</li></ul><p>这两种复位方式可以根据实际需求和应用场景选择使用。需要注意的是，<code>Watchdog Driver</code> 的初始化过程不应由 <code>Watchdog Manager</code> 负责，而应由 <code>EcuM（Electronic Control Unit Manager）</code>模块来完成。同时，<code>Watchdog Manager</code> 的初始化应在操作系统（<code>OS</code>）启动之后执行，以确保其正常工作并监控系统的运行状态。</p><h1 id="Alive-Supervision"><a href="#Alive-Supervision" class="headerlink" title="Alive Supervision"></a>Alive Supervision</h1><p>针对周期性任务，监控实体在预设时间内的执行次数是固定的。通过这一机制，我们能够精准检测周期性任务的执行频率是否异常，确保系统稳定运行。</p><p>AUTOSAR 中 <code>Alive Supervision</code> 监控机制需要配置以下四个基本参数：</p><ul><li><p><code>WdgMExpectedAliveIndications</code> (期望指示次数): 指定在给定的时间周期内，监控实体(SE)应调用 <code>WdgM_CheckpointReached</code> 函数的次数。这是预期的正常调用次数。</p></li><li><p><code>WdgMMaxMargin</code> (最大允许偏差): 表示实际调用 <code>WdgM_CheckpointReached</code> 函数次数可以超过期望次数的最大值。实际允许的最大调用次数为 <code>WdgMExpectedAliveIndications + WdgMMaxMargin</code>。</p></li><li><p><code>WdgMMinMargin</code> (最小允许偏差): 表示实际调用 <code>WdgM_CheckpointReached</code> 函数次数可以低于期望次数的最大值。实际允许的最小调用次数为 <code>WdgMExpectedAliveIndications - WdgMMinMargin</code>。</p></li><li><p><code>WdgMSupervisionReferenceCycle</code> (监控参考周期): 定义了 <code>WdgM_Mainfunction</code> 函数的调用周期，即监控的时间基准。</p></li></ul><p>以配置<code>&#123;4, 1, 1, 2&#125;</code>为例，这表示 <code>WdgM_Mainfunction</code> 函数两次。在这两次内，对应的 <code>WdgM_CheckpointReached</code> 函数的调用次数应在<code>(4 - 1) = 3</code> 次到<code>(4 + 1) = 5</code> 次之间。若超出此范围，则视为超时，并根据 <code>AUTOSAR</code> 状态机规范更新该监控实体(<code>SE</code>)的 <code>Local Status</code>，以反映其不符合预期的运行状态。</p><h1 id="Deadline-Supervision"><a href="#Deadline-Supervision" class="headerlink" title="Deadline Supervision"></a>Deadline Supervision</h1><p>如前文所述，<code>Deadline supervison</code> 主要用于非周期性的监控实体 <code>SE</code>，该类监控实体往往都是事件型进行触发，触发之后的监控实体 <code>SE</code> 执行的时间不能过长，同时也不能过短，这个 <code>SE</code> 的执行时长就需要通过相应的阈值进行限定，从而来监控其运行状态是否满足设计要求。</p><p>对于每一个 <code>SE</code> 的 <code>Deadline Supervision</code>，两个 <code>Checkpoint</code> 时必须需要进行配置的，因为 <code>Deadline Supervision</code> 就是针对两个 <code>Checkpoint</code> 之间的 <code>Transition</code> 执行时间进行监控，即针对监控实体 <code>SE</code> 执行的动态行为进行监控。</p><p>AUTOSAR 中 <code>Deadline Supervision</code> 监控机制需要配置以下两个基本参数：</p><ul><li><p><code>WdgMDeadlineMin</code>：这是两个 <code>Checkpoint</code> 之间 <code>Transition</code> 所允许的最小执行时间。它确保 <code>SE</code> 不会执行得过快，从而可能忽略关键任务或跳过必要的步骤。</p></li><li><p><code>WdgMDeadlineMax</code>：这是两个 <code>Checkpoint</code> 之间 <code>Transition</code> 所允许的最大执行时间。它防止 <code>SE</code> 执行时间过长，从而可能导致系统延迟或其他性能问题。</p></li></ul><p>重要的是，此类监控的 <code>SE</code> 中不允许存在 <code>Checkpoint</code> 的嵌套行为。例如，<code>Start1</code>, <code>Start2</code>, <code>End2</code>, <code>End1</code> 这样的顺序是不被允许的，因为这可能导致时间监控的混乱和不可预测的行为。</p><p>以配置<code>&#123;30ms, 40ms&#125;</code>为例，这表示对应的 <code>SE</code> 在两个 <code>Checkpoint</code> 之间的 <code>Transition</code> 执行时间必须在 <code>30</code> 毫秒到 <code>40</code> 毫秒之间。如果实际执行时间超出这个范围，则视为超时，系统会根据 <code>AUTOSAR</code> 状态机规范更新该监控实体(<code>SE</code>) 的 <code>Local Status</code>，以反映其不符合预期的运行状态。</p><h1 id="Logic-Supervision"><a href="#Logic-Supervision" class="headerlink" title="Logic Supervision"></a>Logic Supervision</h1><blockquote><p>在 ISO 26262 中，程序流监控是确保行车安全的关键环节。它能够有效识别软件运行中的设计意图偏离，并采取相应的纠正措施，从而保障车辆系统的稳定运行。</p></blockquote><p><code>Logic Supervision</code> 在 <code>AUTOSAR</code> 中扮演着确保程序流运行时序正确性的关键角色，这对于满足功能安全要求的电子控制单元（<code>ECU</code>）来说至关重要。它通过比对实际运行过程中 <code>Checkpoint</code> 之间的转换关系与预先设定的 <code>Checkpoint</code> 转换关系来进行判断。如果实际转换关系与设定不符，系统会报告错误；若实际转换关系符合预设要求，则程序运行正常。<br>通过 <code>Logic Supervision</code>，可以及时发现并处理程序流中的时序错误，从而确保 <code>ECU</code> 在复杂多变的车辆运行环境中能够稳定、可靠地执行其功能。这种监控机制有助于提高车辆的整体安全性和可靠性，是功能安全标准中不可或缺的一部分。</p><p><img src="/2024/02/23/AUTOSAR-CP-WdgM/image-20240226165020663.png" alt="image-20240226165020663"></p><p>如上图我们可以知道我们将每个代码执行步骤分成了上面 7 个 <code>Checkpoint</code>，其简化模型如下图所示：</p><p><img src="/2024/02/23/AUTOSAR-CP-WdgM/image-20240226165125192.png" alt="image-20240226165125192"></p><p>也可以抽象成以下形式：</p><p><img src="/2024/02/23/AUTOSAR-CP-WdgM/image-20240226165151404.png" alt="image-20240226165151404"></p><p>在 <code>Logic Supervision</code> 中，识别两两 <code>Checkpoint</code> 之间的转换关系是否属于静态配置的转换关系 <code>Group</code> 是关键步骤。这些静态配置的转换关系 <code>Group</code> 定义了哪些 <code>Checkpoint</code> 之间的转换是合法和预期的。</p><p>当程序执行时，<code>Logic Supervision</code> 会监控当前 <code>Checkpoint</code> 与下一个 <code>Checkpoint</code> 之间的转换关系。如果这个转换关系包含在静态配置的转换关系 <code>Group</code> 中，那么认为程序执行的是正常的序列行为。如果转换关系不在配置的 <code>Group</code> 内，则表明发生了异常，可能是程序逻辑错误或其他问题导致的。</p><p>为了确保程序流的正确性，开发人员需要仔细定义和配置这些转换关系 <code>Group</code>。这些 <code>Group</code> 应该基于程序逻辑和功能需求来设计，以确保它们能够准确反映程序执行过程中的合法切换路径。</p><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p><code>Watchdog Manager</code> 模块的运行流程如下：</p><p><img src="/2024/02/23/AUTOSAR-CP-WdgM/image-20240226165932323.png" alt="image-20240226165932323"></p><p>基于上图的 <code>Watchdog Manager</code> 模块运行流程，我们可以得出以下重要结论：</p><ul><li>对于采用 <code>Alive Supervision</code> 的监控实体，其运行状态和生命周期的判断结果，在 <code>WdgM_Mainfunction</code> 函数中得出。</li><li>对于采用 <code>Deadline Supervision</code> 或 <code>Logical Supervision</code> 的监控实体，其判断结果则在 <code>WdgM_CheckpointReached</code> 函数中得出。</li></ul><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><table><thead><tr><th>函数名</th><th>函数功能</th></tr></thead><tbody><tr><td><strong>WdgM_Init</strong></td><td>初始化 <code>WdgM</code> 模块</td></tr><tr><td><strong>WdgM_DeInit</strong></td><td>反初始化 <code>WdgM</code> 模块，在执行本函数之前，因设置看门狗最大超时时间，确保其能正常进入 <code>WDGIF_OFF_MODE</code>，或者复位</td></tr><tr><td><strong>WdgM_GetVersionInfo</strong></td><td>返回 <code>WdgM</code> 模块的版本信息</td></tr><tr><td><strong>WdgM_SetMode</strong></td><td>设置提前预设好的工作模式</td></tr><tr><td><strong>WdgM_GetMode</strong></td><td>获取当前的工作模式</td></tr><tr><td><strong>WdgM_CheckpointReached</strong></td><td>通知 <code>WdgM</code> 已经到达了 <code>SE</code> 的 <code>Checkpoint</code></td></tr><tr><td><strong>WdgM_GetLocalStatus</strong></td><td>获取一个 <code>SE</code> 的 <code>Local Status</code></td></tr><tr><td><strong>WdgM_GetGlobalStatus</strong></td><td>获取 <code>Global Status</code></td></tr><tr><td><strong>WdgM_PerformReset</strong></td><td>主动触发复位</td></tr><tr><td><strong>WdgM_GetFirstExpiredSEID</strong></td><td>获取第一个超时的 <code>SE</code> 的 <code>ID</code></td></tr><tr><td><strong>WdgM_MainFunction</strong></td><td><code>WdgM</code> 循环处理的周期执行函数</td></tr></tbody></table><h1 id="软件实现"><a href="#软件实现" class="headerlink" title="软件实现"></a>软件实现</h1><p>待更新</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.zhihu.com/tardis/zm/art/651467544?source_id=1005">https://www.zhihu.com/tardis/zm/art/651467544?source_id=1005</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> AUTOSAR </category>
          
          <category> AUTOSAR System Services </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AUTOSAR CP </tag>
            
            <tag> BSW </tag>
            
            <tag> Wdg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AUTOSAR CP OS 时间保护详解</title>
      <link href="/2024/02/22/AUTOSAR-CP-OS-%E6%97%B6%E9%97%B4%E4%BF%9D%E6%8A%A4/"/>
      <url>/2024/02/22/AUTOSAR-CP-OS-%E6%97%B6%E9%97%B4%E4%BF%9D%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>本文章所参考的 AUTOSAR 标准为 4.4.0 版本</p></blockquote><p><code>AUTOSAR OS</code>，源于早期的 <code>OSEK OS</code>，随着汽车行业的快速发展，特别是对电子信息安全和功能安全要求的日益提升，传统的 <code>OSEK OS</code> <code>已无法满足这些高标准的需求。为此，AUTOSAR</code> 组织进行了扩展和增强，基于 <code>OSEK OS</code> 的基础，为用户提供了四类具备不同功能安全级别的可裁剪操作系统类型，分别是 <code>SC1</code> 至 <code>SC4</code>。</p><ul><li><strong>SC1:</strong> <code>OSEK OS</code> + <code>Schedule Table</code>；</li><li><strong>SC2:</strong> <code>OSEK OS</code> + <code>Schedule Table</code> + <code>Timing Protection</code>;</li><li><strong>SC3:</strong> <code>OSEK OS</code> + <code>Schedule Table</code> + <code>Memory Protection</code>;</li><li><strong>SC4:</strong> <code>OSEK OS</code> + <code>Schedule Table</code> + <code>Timing Protection</code> + <code>Memory Protection</code>；</li></ul><p>如下图所示，较为清晰了描述了这四种不同可裁剪类型的区别与联系。</p><p><img src="/2024/02/22/AUTOSAR-CP-OS-%E6%97%B6%E9%97%B4%E4%BF%9D%E6%8A%A4/image.png" alt="image"></p><h1 id="AUTOSAR-OS-时间保护"><a href="#AUTOSAR-OS-时间保护" class="headerlink" title="AUTOSAR OS 时间保护"></a>AUTOSAR OS 时间保护</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><code>AUTOSAR OS</code> 的四大可定制类型凸显了时间保护（<code>Timing Protection</code>）这一关键功能机制的重要性。作为实时操作系统，<code>AUTOSAR OS</code> 需要在预设时限内精确执行任务。然而，超时错误偶有发生，此时系统需采取有效的时间保护措施以预防此类情况。</p><p><code>Deadline Monitoring</code> 是常见的时间保护手段。一旦 OS 检测到任务运行超时，它会触发相应的 Hook 函数以报告系统错误。然而，<code>AUTOSAR OS</code> 并未采用监控截止时间的方法来实现时间保护，因为这种方式往往无法精确识别错误的根源。</p><p>以任务 1 为例，即便其运行时间超过截止时间，也不一定意味着任务 1 本身存在错误。实际上，可能是在执行任务 1 之前，任务 2 频繁抢占资源或长时间阻塞资源访问，间接导致任务 1 超时。若仅因任务 1 超时而判断其为错误并停止，那么真正的罪魁祸首任务 2 则可能继续逍遥法外，这显然不合理，也无法有效保护 OS 中各任务的时间管理。</p><p>为了更好地说明这一点，我们可以设想一个操作系统，其中包含任务 A、B、C，每个任务都有明确的优先级、执行时间和截止时间，如下表所示：</p><p><img src="/2024/02/22/AUTOSAR-CP-OS-%E6%97%B6%E9%97%B4%E4%BF%9D%E6%8A%A4/image-20240222143603586.png" alt="image-20240222143603586"></p><p>假设所有任务均于时间 0 准备就绪，执行流程将严格遵循以下时序，确保所有任务均按时完成。</p><ul><li>任务 A 因最高优先级而首先执行。</li><li>随后，任务 B 在 1 个 Tick 后启动，任务 C 则在 3 个 Tick 后开始。</li><li>任务 C 执行 1 个 Tick 后被任务 A 中断，待任务 A 完成后，任务 C 继续执行。</li><li>至第 10 个 Tick，任务 C 完成，整个过程中无超时现象，且剩余 1 个 Tick 的空闲时间。</li></ul><p><img src="/2024/02/22/AUTOSAR-CP-OS-%E6%97%B6%E9%97%B4%E4%BF%9D%E6%8A%A4/image-20240222143826727.png" alt="image-20240222143826727"></p><p>现考虑任务 A 与 B 出现行为异常的情形。异常状态如下图所示：</p><ul><li>任务 A 的第二个周期与任务 B 的第一个周期均出现运行时间延长的情况，但均在截止时间之内完成。</li><li>任务 B 在第二个周期提前启动，同样未超过其截止时间。</li><li>尽管任务 C 按照正常时序执行，但由于任务 A 与任务 B 的异常行为，导致任务 C 的执行超时，从而引发超时错误。</li></ul><p><img src="/2024/02/22/AUTOSAR-CP-OS-%E6%97%B6%E9%97%B4%E4%BF%9D%E6%8A%A4/image-20240222144202158.png" alt="image-20240222144202158"></p><p>因此，从上述案例的分析中，我们可以得出以下结论：在固定优先级抢占式操作系统，如 <code>AUTOSAR OS</code> 中，任务或中断服务例程（<code>ISR</code>）是否能够满足其截止日期，主要取决于三大关键因素：</p><ol><li><p><strong>任务&#x2F;ISR 的执行时间：</strong> 这包括任务从获得 <code>CPU</code> 执行权到主动放弃 <code>CPU</code> 的执行周期时间，以及第二类 <code>ISR</code> 从开始到结束的总运行时间。</p></li><li><p><strong>任务&#x2F;ISR 因低优先级任务&#x2F;ISR 锁定共享资源或禁用中断而遭受的阻塞时间：</strong> 这涉及任务或 ISR 持有共享资源的时间（从 <code>GetResource</code> 调用到 <code>ReleaseResource</code> 调用的时间），操作系统中断被任务&#x2F;ISR 挂起的时间（<code>OSInterrupts</code> 关闭到打开的时间），以及任务&#x2F;ISR 暂停&#x2F;禁用所有中断的持续时间（<code>AllInterrupts</code> 关闭到打开的时间）。</p></li><li><p><strong>任务&#x2F;ISR 的到达间隔率：</strong> 这指的是任务从连续两次获得 <code>CPU</code> 执行权之间的间隔时间，包括任务从 <code>SUSPENDED</code> 状态转换到 <code>READY</code> 状态的时间，以及从 <code>WAITING</code> 状态转换到 <code>READY</code> 状态的时间。对于第二类 <code>ISR</code>，这还包括其连续两次执行之间的间隔时间。</p></li></ol><p>针对上述三大关键因素，<code>AUTOSAR OS</code> 采用了以下三种时间保护机制：</p><ol><li><p><strong>执行时间保护：</strong> 确保任务或第二类 <code>ISR</code> 的执行时间在静态配置的上限之内，称为执行预算。这主要保护任务的实际执行时间和第二类 <code>ISR</code> 的完整运行周期。</p></li><li><p><strong>锁定时间保护：</strong> 确保任务或 <code>ISR</code> 锁定共享资源或禁用中断的时间不超过静态配置的上限，称为锁定预算。这主要涉及对共享资源持有时间、操作系统中断挂起时间以及所有中断禁用时间的监控。</p></li><li><p><strong>到达间隔时间保护：</strong> 保证任务或第二类 <code>ISR</code> 到达间隔时间在静态配置的下限之上，称为时间帧。这确保了任务从 <code>READY</code> 状态转换的间隔时间以及第二类 <code>ISR</code> 的执行间隔符合预设要求。</p></li></ol><p>下图显示了执行时间保护和到达间隔时间保护如何与 <code>AUTOSAR OS</code> 的任务状态转换模型进行交互。</p><p><img src="/2024/02/22/AUTOSAR-CP-OS-%E6%97%B6%E9%97%B4%E4%BF%9D%E6%8A%A4/image-20240222151032475.png" alt="image-20240222151032475"></p><p>特别的，值得注意的是 <code>AUTOSAR OS</code> 的时间保护机制具备以下基本特性：</p><ol><li><p><strong>任务与二类中断的专用性：</strong> 时间保护机制仅适用于任务和第二类中断，而不适用于第一类中断。这是因为在 <code>AUTOSAR OS</code> 中，第一类中断通常被设计为异步事件处理，其执行时间通常较短且难以预测，因此不适用于时间保护。</p></li><li><p><strong>OS 启动先决条件：</strong> 在操作系统（OS）未启动之前，时间保护机制将不会生效。这是因为时间保护机制依赖于 OS 提供的服务和资源，如任务调度、中断管理等，而这些服务在 OS 未启动前是不可用的。</p></li><li><p><strong>信任级别的要求：</strong> 在 <code>trusted OS-Applications</code> 场景中，所有的时间信息都必须准确无误，否则系统可能会在运行时发生失败。这是因为信任级别的应用通常对实时性和可靠性有更高的要求，任何时间上的误差都可能导致系统行为异常。然而，对于 <code>non-trusted OS Applications</code>，时间保护机制可以作为加强可执行对象之间定时界限的一个手段，以提高系统的稳定性和可靠性。</p></li><li><p><strong>中断禁用限制：</strong> <code>DisableAllInterrupts</code> 和 <code>SuspendAllInterrupts</code> 等相关接口并不能关闭时间保护定时器中断。这是因为时间保护定时器中断是确保系统实时性和任务截止日期的重要机制，如果允许这些接口关闭时间保护定时器中断，将会破坏时间保护的完整性和有效性。因此，<code>AUTOSAR OS</code> 设计规定这些接口不得影响时间保护定时器中断的正常工作。</p></li></ol><h2 id="故障后措施"><a href="#故障后措施" class="headerlink" title="故障后措施"></a>故障后措施</h2><p>关于时间保护机制在检测到时间异常后的具体处理细节，<code>AUTOSAR_SWS_OS 7.7.2.2 Requirements</code> 规范中进行了明确的规定。当时间保护机制检测到任何与时间相关的异常时，会调用 <code>ProtectionHook</code> 函数，并传递相应的错误码，以便应用程序或系统能够采取适当的措施进行响应。</p><ul><li><p><code>E_OS_PROTECTION_ARRIVAL</code>：当触发到达间隔时间保护时，意味着任务或 <code>ISR</code> 的到达间隔时间违反了静态配置的下限（时间帧）。这种情况下，<code>ProtectionHook</code> 函数将收到 <code>E_OS_PROTECTION_ARRIVAL</code> 错误码。这通常表明系统调度或任务管理存在问题，可能需要重新评估任务的时间需求或调度策略。</p></li><li><p><code>E_OS_PROTECTION_TIME</code>：当触发执行时间保护或锁定时间保护时，意味着任务或 <code>ISR</code> 的执行时间或锁定时间超过了静态配置的上限（执行预算或锁定预算）。在这种情况下，<code>ProtectionHook</code> 函数将收到 <code>E_OS_PROTECTION_TIME</code> 错误码。这通常表明存在代码效率问题、资源争用或优先级配置不当等问题，需要进行性能调优或资源分配调整。</p></li><li><p><code>E_OS_PROTECTION_LOCKED</code>：当触发锁定时间保护时，意味着任务或 <code>ISR</code> 因锁定共享资源或禁用中断而遭受的阻塞时间超过了静态配置的上限。此时，<code>ProtectionHook</code> 函数将接收到 <code>E_OS_PROTECTION_LOCKED</code> 错误码。这通常表明资源管理或中断控制存在问题，可能需要优化资源访问方式、减少资源争用或调整中断处理策略。</p></li></ul><p><code>ProtectionHook</code> 函数的具体实现取决于应用程序或系统的需求。在接收到这些错误码后，它可以用于记录错误信息、触发警报、执行恢复操作或采取其他适当的措施来应对时间异常。</p><h1 id="ProtectionHook"><a href="#ProtectionHook" class="headerlink" title="ProtectionHook"></a>ProtectionHook</h1><p><code>ProtectionHook</code> 函数在 <code>AUTOSAR OS</code> 中扮演了一个关键角色，它为用户提供了一个自定义的接口，用于处理时间保护机制检测到的时间异常。这个函数的原型如你所述，<code>ProtectionReturnType ProtectionHook(StatusType Fatalerror)</code>，其中 <code>Fatalerror</code> 参数是一个状态类型，用于传递检测到的具体错误码。</p><p>当用户实现 <code>ProtectionHook</code> 函数时，他们需要根据传递的错误码来决定函数的行为。根据 <code>AUTOSAR_SWS_OS 7.8.2 Requirements</code> <code>规范，ProtectionHook</code> 函数可以通过返回不同的命令码来指示系统应采取的措施，这些命令码及其对应的功能如下：</p><ul><li><p><code>PRO_IGNORE</code>：选择忽略此次错误。这通常适用于那些认为不会导致严重问题或可以容忍的小幅度时间偏差。</p></li><li><p><code>PRO_TERMINATETASKISR</code>：强制终止引起时间异常的任务或第二类中断服务例程（ISR）。这是一种比较严格的措施，用于防止错误扩散或保护系统免受进一步的影响。</p></li><li><p><code>PRO_TERMINATEAPPL</code>：强制终止引起时间异常的任务或 ISR 所属的应用程序。这通常用于隔离和清除问题来源，但可能导致部分系统功能丧失。</p></li><li><p><code>PRO_TERMINATEAPPL_RESTART</code>：强制重启引起时间异常的任务或 ISR 所属的应用程序，并尝试恢复系统到正常状态。这是一种更为激进的恢复措施，适用于那些认为重启应用程序可以解决问题的场景。</p></li><li><p><code>PRO_SHUTDOWN</code>：关闭整个系统。这是一种极端的措施，通常只在系统出现无法恢复的错误或面临严重的安全威胁时才使用。</p></li></ul><p><code>ProtectionHook</code> 函数的实现应该基于应用程序和系统的具体需求，以及对错误处理和系统恢复能力的权衡。在编写 <code>ProtectionHook</code> 函数时，开发者需要仔细考虑每个命令码的含义和潜在影响，以确保系统在遇到时间异常时能够做出合理且有效的响应。</p><p>通过这种机制，<code>AUTOSAR OS</code> 提供了一种灵活而强大的手段来管理实时系统中的时间相关错误，从而增强了系统的健壮性和可靠性。</p><h1 id="硬件实现"><a href="#硬件实现" class="headerlink" title="硬件实现"></a>硬件实现</h1><blockquote><p>仅以英飞凌的 <code>TriCore</code> 架构为例进行讲解</p></blockquote><p>英飞凌的 <code>TriCore</code> 架构是一个专为汽车和工业应用设计的实时处理器架构。在其 <code>AURIX</code> 系列微控制器中，时间保护系统是一个关键特性，它提供了对任务执行时间的监控和保护，从而确保系统的实时性和可靠性。</p><p>从 <code>Infineon-AURIX_TC3xx_Architecture_vol1-UserManual-v01_00-EN</code> 手册的 <code>11 Temporal Protection System</code> 章节中，我们可以了解到 <code>TriCore</code> 架构的时间保护定时器具有以下功能：</p><ul><li><p><strong>单调递减：</strong> 时间保护定时器以 <code>CPU</code> 主频的频率单调递减。这意味着定时器从写入的非零值开始，以固定的时钟周期逐渐递减至零。</p></li><li><p><strong>启动与关闭：</strong> 通过写入非零值来启动定时器，而写入零值则关闭定时器。这种机制允许软件精确地控制何时开始和停止时间监控。</p></li><li><p><strong>异常陷阱触发：</strong> 当定时器到期（即递减至零）时，会触发一个异常陷阱（<code>Class-4</code>, <code>Tin-7</code>）。这是一个硬件级别的中断，用于通知软件有一个时间保护事件发生了。重要的是，这个异常陷阱是不能通过 <code>DisableAllInterrupts</code>&#x2F;<code>SuspendAllInterrupts</code> 等接口关闭的，因为它是由硬件直接管理和触发的。</p></li><li><p><strong>多核支持：</strong> 每个核都配备了独立的时间保护定时器。以 <code>TC397</code> 为例，它有 6 个核，每个核有 3 个独立的时间保护定时器。这意味着总共有 <code>6 * 3 = 18</code> 个时间保护定时器可供使用。这种设计允许每个任务或第二类中断服务例程（<code>ISR</code>）在不同的核上运行，并独立地受到时间保护的监控。</p></li></ul><p><img src="/2024/02/22/AUTOSAR-CP-OS-%E6%97%B6%E9%97%B4%E4%BF%9D%E6%8A%A4/image-20240223105917478.png" alt="image-20240223105917478"></p><p>另外，<code>TriCore</code> 架构还提供了一个 <code>CPU_CCNT</code> 的寄存器，该寄存器在手册<code>Infineon-AURIX_TC3xx_Architecture_vol1-UserManual-v01_00-EN</code>中的 <code>12.11 Performance Counter Registers</code> 章节可以查阅到，该寄存器会记录当前的 <code>CPU</code> 时钟周期，这个寄存器非常适合用来进行间隔时间保护</p><p><img src="/2024/02/22/AUTOSAR-CP-OS-%E6%97%B6%E9%97%B4%E4%BF%9D%E6%8A%A4/image-20240223111111580.png" alt="image-20240223111111580"></p><h1 id="软件实现"><a href="#软件实现" class="headerlink" title="软件实现"></a>软件实现</h1><p>待更新</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/430996183">https://zhuanlan.zhihu.com/p/430996183</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> AUTOSAR </category>
          
          <category> AUTOSAR System Services </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AUTOSAR CP </tag>
            
            <tag> BSW </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo教程</title>
      <link href="/2023/10/31/hexo%E6%95%99%E7%A8%8B/"/>
      <url>/2023/10/31/hexo%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>以下为其他 hexo 博客的跳转链接，比较详细</p><p><a href="https://nu-ll.github.io/2019/09/16/hexo%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/">https://nu-ll.github.io/2019/09/16/hexo%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</a></p><p><a href="https://www.jianshu.com/p/9b4d5903dfc8">https://www.jianshu.com/p/9b4d5903dfc8</a></p><p><a href="https://www.cnblogs.com/MoYu-zc/p/14395965.html">https://www.cnblogs.com/MoYu-zc/p/14395965.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu QT环境搭建</title>
      <link href="/2023/10/31/Ubuntu-QT%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/10/31/Ubuntu-QT%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="QT5"><a href="#QT5" class="headerlink" title="QT5"></a>QT5</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools</span><br><span class="line">sudo apt-get install qt5*</span><br><span class="line">sudo apt-get install qttools5-dev</span><br></pre></td></tr></table></figure><h1 id="QT6"><a href="#QT6" class="headerlink" title="QT6"></a>QT6</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install -y qt6-base-dev qt6-declarative-dev</span><br><span class="line">sudo apt install -y qt6*</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> QT </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH免密登录</title>
      <link href="/2022/10/14/SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
      <url>/2022/10/14/SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h2><p>如果你本地有公钥，则跳过此步。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入命令，一直按回车即可</span></span><br><span class="line">ssh-keygen  <span class="comment">#生成公钥</span></span><br></pre></td></tr></table></figure><h2 id="上传公钥"><a href="#上传公钥" class="headerlink" title="上传公钥"></a>上传公钥</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i C:\Users\username\.ssh\id_rsa.pub username@userip</span><br></pre></td></tr></table></figure><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><h3 id="多密钥"><a href="#多密钥" class="headerlink" title="多密钥"></a>多密钥</h3><p>config 文件添加 IdentityFile</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">Host userip</span><br><span class="line">  HostName userip</span><br><span class="line">  User username</span><br><span class="line">  IdentityFile C:/Users/username/.ssh/id_rsa</span><br><span class="line">  ServerAliveInterval 60</span><br><span class="line">  Port 22</span><br></pre></td></tr></table></figure><h3 id="无法免密"><a href="#无法免密" class="headerlink" title="无法免密"></a>无法免密</h3><p>首先开 debug 模式，在服务端执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/sbin/sshd -d -p 2222</span><br></pre></td></tr></table></figure><p>在客户端执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -vvv username@userip -p 2222 -i C:/Users/username/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>观察日志，看是否有以下日志</p><ul><li><p>Authentication refused: bad ownership or modes for directory</p></li><li><p>Could not open authorized keys : Permission denied</p></li></ul><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>sshd 为了安全，对属主的目录和文件权限有所要求。如果权限不对，则 ssh 的免密码登陆不生效。</p><ul><li><p>用户目录权限为 755 或者 700，就是不能是 77x</p></li><li><p>.ssh 目录权限一般为 755 或者 700</p></li><li><p>rsa_id.pub 及 authorized_keys 权限一般为644</p></li><li><p>rsa_id 权限必须为 600</p></li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>使用<code>chmod</code>命令进行权限设置。</p><p>如若依然存在<code>Could not open authorized keys : Permission denied</code>，在用户路径下执行<code>sudo restorecon -FRv ~/.ssh</code>重置 ssh 路径的安全上下文。</p>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARM指令中LDM与STM指令详解</title>
      <link href="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h2><p>ARM指令中多数据传输共有两种:</p><p><code>LDM</code>:(load much)多数据加载,将地址上的值加载到寄存器上</p><p><code>STM</code>:(store much)多数据存储,将寄存器上的值加载到地址上</p><p>其主要用途有：现场保护、数据复制、参数传送等，共有8种模式 (前面4种用于数据块的传输，后面4种是堆栈操作）具体如下：</p><ol><li><code>IA</code>: (Increase After） 每次传送后地址加 4,其中的寄存器从左到右执行,例如:<code>STMIA R0,&#123;R1,LR&#125;</code> 先存<code>R1</code>,再存<code>LR</code></li><li><code>IB</code>: (Increase Before）每次传送前地址加 4,同上</li><li><code>DA</code>: (Decrease After） 每次传送后地址减 4,其中的寄存器从右到左执行,例如:<code>STMDA R0,&#123;R1,LR&#125;</code> 先存<code>LR</code>,再存<code>R1</code></li><li><code>DB</code>: (Decrease Before）每次传送前地址减 4,同上</li><li><code>FD</code>: (Full Descending) 满递减堆栈</li><li><code>FA</code>: (Full Ascending) 满递增堆栈</li><li><code>ED</code>: (Empty Descending) 空递减堆栈</li><li><code>EA</code>: (Empty Ascending) 空递增堆栈</li></ol><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_1373262814ZgK4.png" alt="img"></p><p>示例：</p><blockquote><p>两段代码的执行结果是一样的，但是使用堆栈指令的压栈和出栈操作编程很简单（只有前后一致即可），而使用数据块指令进行压栈和出栈操作则需要考虑空与满，加与减对应的问题。</p></blockquote><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_1373262828WWkg.png" alt="img"></p><h2 id="格式"><a href="#格式" class="headerlink" title="格式:"></a>格式:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDM&#123;cond&#125; mode Rn&#123;!&#125;, reglist&#123;^&#125;</span><br><span class="line"></span><br><span class="line">STM&#123;cond&#125; mode Rn&#123;!&#125;, reglist&#123;^&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><p>​<code>Rn</code>：基址寄存器，装有传送数据的起始地址，<code>Rn</code>不允许为<code>R15</code>；</p><p>​<code>!</code>：表示最后的地址写回到<code>Rn</code>中；</p><p>​<code>reglist</code>：可包含多于一个寄存器范围，用<code>,</code>隔开，如<code>&#123;R1，R2，R6-R9&#125;</code>，寄存器由小到大顺序排列；</p><p>​<code>^</code>：不允许在用户模式和系统模式下运行</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STMFD  SP，｛R0-R3｝</span><br><span class="line"></span><br><span class="line">；执行伪指令大致是：</span><br><span class="line">；SP-4  = R3</span><br><span class="line">；SP-8  = R2</span><br><span class="line">；SP-12 = R1</span><br><span class="line">；SP-16 = R0</span><br><span class="line">；SP 的值未修改。</span><br><span class="line"></span><br><span class="line">LDMFD  SP，｛R0-R3｝</span><br><span class="line">；执行伪指令大致是：</span><br><span class="line">；R3 = SP-4</span><br><span class="line">；R2 = SP-8</span><br><span class="line">；R1 = SP-12</span><br><span class="line">；R0 = SP-16</span><br><span class="line">；SP 的值未修改。</span><br><span class="line"></span><br><span class="line">STMFD  SP！，｛R0-R3｝</span><br><span class="line">；执行伪指令大致是：</span><br><span class="line">；SP -= 4</span><br><span class="line">；SP = R3</span><br><span class="line">；SP -= 4</span><br><span class="line">；SP = R2</span><br><span class="line">；SP -= 4</span><br><span class="line">；SP = R1</span><br><span class="line">；SP -= 4</span><br><span class="line">；SP = R0</span><br><span class="line">；SP -= 4</span><br><span class="line">；SP 的值已修改。</span><br><span class="line"></span><br><span class="line">STMED  SP！，｛R0-R3｝</span><br><span class="line">；执行伪指令大致是：</span><br><span class="line">；SP = R3</span><br><span class="line">；SP -= 4</span><br><span class="line">；SP = R2</span><br><span class="line">；SP -= 4</span><br><span class="line">；SP = R1</span><br><span class="line">；SP -= 4</span><br><span class="line">；SP = R0</span><br><span class="line">；SP -= 4</span><br><span class="line">；SP 的值已修改。</span><br></pre></td></tr></table></figure><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="IA"><a href="#IA" class="headerlink" title="IA"></a>IA</h3><h4 id="STMIA-R0-R1-R2-R3-R14"><a href="#STMIA-R0-R1-R2-R3-R14" class="headerlink" title="STMIA R0!,{R1,R2, R3,R14}"></a>STMIA R0!,{R1,R2, R3,R14}</h4><p>​先传后增,寄存器→RAM<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_1373266870ojDd.png" alt="img"></p><h4 id="LDMIA-R0-R1-R2-R3-R14"><a href="#LDMIA-R0-R1-R2-R3-R14" class="headerlink" title="LDMIA R0!,{R1,R2, R3,R14}"></a>LDMIA R0!,{R1,R2, R3,R14}</h4><p>​先传后增, RAM →寄存器<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_1373267167skGt.png" alt="img"></p><h3 id="IB"><a href="#IB" class="headerlink" title="IB"></a>IB</h3><h4 id="STMIB-R0-R1-R2-R3-R14"><a href="#STMIB-R0-R1-R2-R3-R14" class="headerlink" title="STMIB R0!,{R1,R2, R3,R14}"></a>STMIB R0!,{R1,R2, R3,R14}</h4><p>​先增后传,寄存器→RAM<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_13732675001eeY.png" alt="img"></p><h4 id="LDMIB-R0-R1-R2-R3-R14"><a href="#LDMIB-R0-R1-R2-R3-R14" class="headerlink" title="LDMIB R0!,{R1,R2, R3,R14}"></a>LDMIB R0!,{R1,R2, R3,R14}</h4><p>​先增后传, RAM →寄存器<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_13732676888U86.png" alt="img"></p><h3 id="DA"><a href="#DA" class="headerlink" title="DA"></a>DA</h3><h4 id="STMDA-R0-R1-R2-R3-R14"><a href="#STMDA-R0-R1-R2-R3-R14" class="headerlink" title="STMDA R0!,{R1,R2, R3,R14}"></a>STMDA R0!,{R1,R2, R3,R14}</h4><p>​先传后减, 寄存器→ RAM<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_13732677555jox.png" alt="img"></p><h4 id="LDMDA-R0-R1-R2-R3-R14"><a href="#LDMDA-R0-R1-R2-R3-R14" class="headerlink" title="LDMDA R0!,{R1,R2, R3,R14}"></a>LDMDA R0!,{R1,R2, R3,R14}</h4><p>​先传后减, RAM → 寄存器<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_13732679412hwL.png" alt="img"></p><h3 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h3><h4 id="STMDB-R0-R1-R2-R3-R14"><a href="#STMDB-R0-R1-R2-R3-R14" class="headerlink" title="STMDB R0!,{R1,R2, R3,R14}"></a>STMDB R0!,{R1,R2, R3,R14}</h4><p>​先减后传,寄存器→ RAM<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_137326812866pz.png" alt="img"></p><h4 id="LDMDB-R0-R1-R2-R3-R14"><a href="#LDMDB-R0-R1-R2-R3-R14" class="headerlink" title="LDMDB R0!,{R1,R2, R3,R14}"></a>LDMDB R0!,{R1,R2, R3,R14}</h4><p>​先减后传, RAM → 寄存器<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_13732683358578.png" alt="img"></p><h3 id="FA"><a href="#FA" class="headerlink" title="FA"></a>FA</h3><h4 id="STMFA-SP-R0-R1-R2-R14"><a href="#STMFA-SP-R0-R1-R2-R14" class="headerlink" title="STMFA SP!,{R0,R1,R2,R14}"></a>STMFA SP!,{R0,R1,R2,R14}</h4><p>​满递增入栈,R13为基址地址<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_13732685373tJq.png" alt="img"></p><h4 id="LDMFA-SP-R0-R1-R2-R14"><a href="#LDMFA-SP-R0-R1-R2-R14" class="headerlink" title="LDMFA SP!,{R0,R1,R2,R14}"></a>LDMFA SP!,{R0,R1,R2,R14}</h4><p>​满递增出栈,R13为基址地址<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_1373268638AZCe.png" alt="img"></p><h3 id="FD"><a href="#FD" class="headerlink" title="FD"></a>FD</h3><h4 id="STMFD-SP-R0-R1-R2-R14"><a href="#STMFD-SP-R0-R1-R2-R14" class="headerlink" title="STMFD SP!,{R0,R1,R2,R14}"></a>STMFD SP!,{R0,R1,R2,R14}</h4><p>​满递减入栈,R13为基址地址<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_1373268720rnOs.png" alt="img"></p><h4 id="LDMFD-SP-R0-R1-R2-R14"><a href="#LDMFD-SP-R0-R1-R2-R14" class="headerlink" title="LDMFD SP!,{R0,R1,R2,R14}"></a>LDMFD SP!,{R0,R1,R2,R14}</h4><p>​满递减出栈,R13为基址地址<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_1373268790DHOz.png" alt="img"></p><h3 id="EA"><a href="#EA" class="headerlink" title="EA"></a>EA</h3><h4 id="STMEA-SP-R0-R1-R2-R14"><a href="#STMEA-SP-R0-R1-R2-R14" class="headerlink" title="STMEA SP!,{R0,R1,R2,R14}"></a>STMEA SP!,{R0,R1,R2,R14}</h4><p>​空递增入栈,R13为基址地址<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_1373268854LaKz.png" alt="img"></p><h4 id="LDMEA-SP-R0-R1-R2-R14"><a href="#LDMEA-SP-R0-R1-R2-R14" class="headerlink" title="LDMEA SP!,{R0,R1,R2,R14}"></a>LDMEA SP!,{R0,R1,R2,R14}</h4><p>​空递增出栈,R13为基址地址<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_1373268937wCaZ.png" alt="img"></p><h3 id="ED"><a href="#ED" class="headerlink" title="ED"></a>ED</h3><h4 id="STMED-SP-R0-R1-R2-R14"><a href="#STMED-SP-R0-R1-R2-R14" class="headerlink" title="STMED SP!,{R0,R1,R2,R14}"></a>STMED SP!,{R0,R1,R2,R14}</h4><p>​空递减入栈,R13为基址地址<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_1373269012Yqnw.png" alt="img"></p><h4 id="LDMED-SP-R0-R1-R2-R14"><a href="#LDMED-SP-R0-R1-R2-R14" class="headerlink" title="LDMED SP!,{R0,R1,R2,R14}"></a>LDMED SP!,{R0,R1,R2,R14}</h4><p>​空递减出栈,R13为基址地址<br>​效果图:</p><p><img src="/2022/10/10/ARM%E6%8C%87%E4%BB%A4%E4%B8%ADLDM%E4%B8%8ESTM%E6%8C%87%E4%BB%A4%E8%AF%A6%E8%A7%A3/28458801_13732690909cnn.png" alt="img"></p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.chinaunix.net/uid-28458801-id-3791987.html">http://blog.chinaunix.net/uid-28458801-id-3791987.html</a></p><p><a href="https://www.cnblogs.com/w-smile/p/14019942.html">https://www.cnblogs.com/w-smile/p/14019942.html</a></p><p><a href="https://www.cnblogs.com/lifexy/p/7363208.html">https://www.cnblogs.com/lifexy/p/7363208.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 汇编指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> ARM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Cortex-M3的RT-Thread的上下文切换</title>
      <link href="/2022/10/10/%E5%9F%BA%E4%BA%8ECortex-M3%E7%9A%84RT-Thread%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/"/>
      <url>/2022/10/10/%E5%9F%BA%E4%BA%8ECortex-M3%E7%9A%84RT-Thread%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> Cortex-M </tag>
            
            <tag> RT-Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改WSL的安装位置</title>
      <link href="/2022/09/24/%E4%BF%AE%E6%94%B9WSL%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE/"/>
      <url>/2022/09/24/%E4%BF%AE%E6%94%B9WSL%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><ol><li><p>点此下载离线 wsl 包 <a href="https://learn.microsoft.com/zh-cn/windows/wsl/install-manual">https://learn.microsoft.com/zh-cn/windows/wsl/install-manual</a></p></li><li><p>将下载的文件加上 .zip 后缀，对齐进行解压。</p><p><img src="/2022/09/24/%E4%BF%AE%E6%94%B9WSL%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE/v2-f11fb313526d10b6bd8bb9cac4a3c169_720w.jpg" alt="img"></p></li><li><p>把它的后缀改为<code>.zip</code>，然后解压到想要安装WSL的目录下。</p></li><li><p>点击 ubuntu.exe，等待一段时间就成功安装到当前目录。</p></li><li><p>需要注意的是安装目录的磁盘不能开<strong>压缩内容以便节省磁盘空间</strong>选项，否则会报错 0xc03a001a, 可以右键【文件夹–&gt;属性–&gt;常规–&gt;高级】找到并关闭这个选项。</p><p><img src="/2022/09/24/%E4%BF%AE%E6%94%B9WSL%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE/v2-fe9ffaab2787cb9c1564f5ee723e5f08_720w.jpg" alt="img"></p></li><li><p>要卸载的话使用命令 wsl –unregister &lt;要卸载的发行版&gt;，之后删除文件夹即可。</p></li><li><p>可以使用 wsl –list –verbose 查看安装的 wsl</p></li><li><p>使用 wsl –shutdown 关闭所有的 wsl</p></li><li><p>wsl -t Ubuntu-20.04 关闭指定的 wsl</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改WSL启动时的默认账户</title>
      <link href="/2022/09/24/%E4%BF%AE%E6%94%B9WSL%E5%90%AF%E5%8A%A8%E6%97%B6%E7%9A%84%E9%BB%98%E8%AE%A4%E8%B4%A6%E6%88%B7/"/>
      <url>/2022/09/24/%E4%BF%AE%E6%94%B9WSL%E5%90%AF%E5%8A%A8%E6%97%B6%E7%9A%84%E9%BB%98%E8%AE%A4%E8%B4%A6%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd --create-home --shell /bin/bash xqyjlj</span><br><span class="line">passwd xqyjlj</span><br><span class="line">usermod -aG sudo xqyjlj</span><br><span class="line">vim /etc/wsl.conf</span><br></pre></td></tr></table></figure><p>添加以下代码</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[user]</span></span><br><span class="line"><span class="attr">default</span>=xqyjlj</span><br></pre></td></tr></table></figure><p>重启 wsl 即可</p>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过VSCode远程调试RISC-V（基于平头哥C906）</title>
      <link href="/2022/09/17/%E9%80%9A%E8%BF%87VSCode%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95RISC-V%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%B9%B3%E5%A4%B4%E5%93%A5C906%EF%BC%89/"/>
      <url>/2022/09/17/%E9%80%9A%E8%BF%87VSCode%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95RISC-V%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%B9%B3%E5%A4%B4%E5%93%A5C906%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近从一个老司机那里搞来一块<a href="https://occ.t-head.cn/vendor/detail/index?id=4030046623349878784">Lichee D1 Dock Pro</a>开发板，由于其板载 jtag 功能，加上现在深圳动不动就封个几天，因此，想尝试一下远程对RISC-V CPU Debug 的可行性。</p><p>废话不多说，直接上干货！</p><h2 id="DebugServer安装"><a href="#DebugServer安装" class="headerlink" title="DebugServer安装"></a>DebugServer安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s https://occ-oss-prod.oss-cn-hangzhou.aliyuncs.com/resource//1657868508115/T-Head-DebugServer-linux-x86_64-V5.16.2-20220708.sh.tar.gz | tar xzf -</span><br><span class="line">sudo chmod 777 ./T-Head-DebugServer-linux-x86_64-V5.16.2-20220708.sh -R</span><br><span class="line">sudo ./T-Head-DebugServer-linux-x86_64-V5.16.2-20220708.sh -i</span><br><span class="line">DebugServerConsole -setclk 8 -port 1025</span><br></pre></td></tr></table></figure><p>如果出现以下日志，则说明已经安装成功了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">+---                                                    ---+</span><br><span class="line">|  T-Head Debugger Server (Build: Jul  8 2022)             |</span><br><span class="line">   User   Layer Version : 5.16.02</span><br><span class="line">   Target Layer version : 2.0</span><br><span class="line">|  Copyright (C) 2022 T-HEAD Semiconductor Co.,Ltd.        |</span><br><span class="line">+---                                                    ---+</span><br><span class="line">T-HEAD: CKLink_Lite_V2, App_ver unknown, Bit_ver null, Clock 2526.316KHz,</span><br><span class="line">       5-wire, With DDC, Cache Flush On, SN CKLink_Lite_Vendor-rog 199C8A.</span><br><span class="line">+--  Debug Arch is CKHAD.  --+</span><br><span class="line">+--  CPU 0  --+</span><br><span class="line">T-HEAD Xuan Tie CPU Info:</span><br><span class="line">        WORD[0]: 0x0910090d</span><br><span class="line">        WORD[1]: 0x11002000</span><br><span class="line">        WORD[2]: 0x260c0001</span><br><span class="line">        WORD[3]: 0x30030066</span><br><span class="line">        WORD[4]: 0x42180000</span><br><span class="line">        WORD[5]: 0x50000000</span><br><span class="line">        WORD[6]: 0x60000853</span><br><span class="line">        MISA   : 0x8000000000b4112d</span><br><span class="line">Target Chip Info:</span><br><span class="line">        CPU Type is C906FDV, Endian=Little, Vlen=128, Version is R1S0P2.</span><br><span class="line">        DCache size is 32K, 4-Way Set Associative, Line Size is 64Bytes, with no ECC.</span><br><span class="line">        ICache size is 32K, 2-Way Set Associative, Line Size is 64Bytes, with no ECC.</span><br><span class="line">        Target is 1 core.</span><br><span class="line">        MMU has 256 JTLB items.</span><br><span class="line">        PMP zone num is 8.</span><br><span class="line">        HWBKPT number is 2, HWWP number is 2.</span><br><span class="line">        MISA: (RV64IMAFDCVX, Imp M-mode, S-mode, U-mode)</span><br><span class="line"></span><br><span class="line">GDB connection command for CPUs(CPU0):</span><br><span class="line">        target remote 127.0.0.1:1025</span><br><span class="line">        target remote 192.168.64.128:1025</span><br><span class="line">        target remote 172.17.0.1:1025</span><br><span class="line"></span><br><span class="line">****************  DebuggerServer Commands List **************</span><br><span class="line">help/h</span><br><span class="line">        Show help informations.</span><br><span class="line">*************************************************************</span><br></pre></td></tr></table></figure><p>如果出现以下日志，插拔几次，复位板子多试试。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">+---                                                    ---+</span><br><span class="line">|  T-Head Debugger Server (Build: Jul  8 2022)             |</span><br><span class="line">   User   Layer Version : 5.16.02</span><br><span class="line">   Target Layer version : 2.0</span><br><span class="line">|  Copyright (C) 2022 T-HEAD Semiconductor Co.,Ltd.        |</span><br><span class="line">+---                                                    ---+</span><br><span class="line">ERROR: Fail to write to CKLINK.</span><br><span class="line">ERROR: Fail to write to CKLINK.</span><br><span class="line">ERROR: Fail to write to CKLINK.</span><br></pre></td></tr></table></figure><h2 id="工具链安装"><a href="#工具链安装" class="headerlink" title="工具链安装"></a>工具链安装</h2><p>我这里直接用柿饼 M7 的开发环境，柿饼 M7 的开发环境可以参考<a href="https://xqyjlj.github.io/2022/09/11/Persim-M7%20Ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(Docker)">Persim-M7 Ubuntu环境搭建(Docker)</a>：</p><p>执行以下命令，看看 gdb 是否能够正常运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/opt/Xuantie-900-gcc-elf-newlib-x86_64-V2.2.6/bin/riscv64-unknown-elf-gdb -v</span><br></pre></td></tr></table></figure><p>我的环境是 ubuntu 20.04，他报了依赖错误，其他平台需要自己解决错误：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/opt/Xuantie-900-gcc-elf-newlib-x86_64-V2.2.6/bin/riscv64-unknown-elf-gdb: error while loading shared libraries: libncursesw.so.5: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p>创建个链接就解决了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ln -s /lib/x86_64-linux-gnu/libncursesw.so.6 /lib/x86_64-linux-gnu/libncursesw.so.5</span><br></pre></td></tr></table></figure><h2 id="VSCode远程开发"><a href="#VSCode远程开发" class="headerlink" title="VSCode远程开发"></a>VSCode远程开发</h2><p>通过VSCode远程到ubuntu中这里可以参考<a href="https://xqyjlj.github.io/2022/09/11/Window%20SSH%20%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">Window SSH 远程开发环境搭建</a>，将设为debug模式</p><p><img src="/2022/09/17/%E9%80%9A%E8%BF%87VSCode%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95RISC-V%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%B9%B3%E5%A4%B4%E5%93%A5C906%EF%BC%89/image-20220917152619029.png" alt="image-20220917152619029"></p><p>按下快捷键【 <strong>Ctrl+Shift+&#96;</strong> 】新建一个终端，执行命令【 <strong>get_persim_m7</strong> 】获取 m7 的开发环境变量</p><p><img src="/2022/09/17/%E9%80%9A%E8%BF%87VSCode%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95RISC-V%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%B9%B3%E5%A4%B4%E5%93%A5C906%EF%BC%89/image-20220917153316448.png" alt="image-20220917153316448"></p><p>随后执行【 scons –target&#x3D;vsc 】，创建 VSCode 配置文件</p><p><img src="/2022/09/17/%E9%80%9A%E8%BF%87VSCode%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95RISC-V%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%B9%B3%E5%A4%B4%E5%93%A5C906%EF%BC%89/image-20220917153606528.png" alt="image-20220917153606528"></p><p>创建 launch.json 文件</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;riscv-debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/opt/Xuantie-900-gcc-elf-newlib-x86_64-V2.2.6/bin/riscv64-unknown-elf-gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;/rtthread.elf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;target remote localhost:1025&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;restore $&#123;workspaceFolder&#125;/rtthread.elf&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;set $pc=0x41000000&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;launchCompleteCommand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;None&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中启动方式为附着方式，即芯片原有程序依然在 Flash 运行，并开启了 JTAG 与 初始化了 DDR，加载 elf 文件后手动调整 PC 指针至 0x41000000 启动</p><p><img src="/2022/09/17/%E9%80%9A%E8%BF%87VSCode%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95RISC-V%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%B9%B3%E5%A4%B4%E5%93%A5C906%EF%BC%89/image-20220917154342507.png" alt="image-20220917154342507"></p><h2 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h2><p>在终端中执行命令【 DebugServerConsole -setclk 8 -port 1025 】启动 DebugServer</p><p><img src="/2022/09/17/%E9%80%9A%E8%BF%87VSCode%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95RISC-V%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%B9%B3%E5%A4%B4%E5%93%A5C906%EF%BC%89/image-20220917154727942.png" alt="image-20220917154727942"></p><p>点击随便下几个断点，并进入调试模式观察</p><p><img src="/2022/09/17/%E9%80%9A%E8%BF%87VSCode%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95RISC-V%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%B9%B3%E5%A4%B4%E5%93%A5C906%EF%BC%89/image-20220917154914791.png" alt="image-20220917154914791"></p><p>可以看到，已经可以正常调试了（全部都是远程哦）</p><p><img src="/2022/09/17/%E9%80%9A%E8%BF%87VSCode%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95RISC-V%EF%BC%88%E5%9F%BA%E4%BA%8E%E5%B9%B3%E5%A4%B4%E5%93%A5C906%EF%BC%89/image-20220917155143020.png" alt="image-20220917155143020"></p><h2 id="裸机调试"><a href="#裸机调试" class="headerlink" title="裸机调试"></a>裸机调试</h2><p>裸机开发需要开启 jtag，并初始化 ddr，</p><p>我们可以借助 xfel 工具执行以下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xfel version</span><br><span class="line">xfel jtag</span><br><span class="line">xfel ddr</span><br></pre></td></tr></table></figure><p>此后再进行调试即可。</p>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> RISC-V </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Window SSH 远程开发环境搭建</title>
      <link href="/2022/09/11/Window%20SSH%20%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/09/11/Window%20SSH%20%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="Ubuntu-设置"><a href="#Ubuntu-设置" class="headerlink" title="Ubuntu 设置"></a>Ubuntu 设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">sudo service ssh start</span><br><span class="line">sudo ps -e |grep ssh</span><br><span class="line">sudo ifconfig</span><br><span class="line">sudo apt-get install samba samba-common</span><br><span class="line">sudo smbpasswd -a xqyjlj #此处用户名必须存在</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">等待设置密码</span></span><br><span class="line"></span><br><span class="line">sudo vim /etc/samba/smb.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在配置文件中找到usershare allow guests = <span class="built_in">yes</span>，在后面一行添加 usershare owner only = <span class="literal">false</span></span></span><br><span class="line">sudo chmod 755 /home/ -R</span><br></pre></td></tr></table></figure><p>添加共享文件夹，为了方便，我这里直接共享 home</p><p>   <img src="/2022/09/11/Window%20SSH%20%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220911133530992.png" alt="image-20220911133530992"></p><h2 id="Windows-设置"><a href="#Windows-设置" class="headerlink" title="Windows 设置"></a>Windows 设置</h2><ol><li><p>打开映射网络驱动器</p><p><img src="/2022/09/11/Window%20SSH%20%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220911133651408.png" alt="image-20220911133651408"></p></li><li><p>输入 Ubuntu 的 IP</p><p><img src="/2022/09/11/Window%20SSH%20%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220911133753309.png" alt="image-20220911133753309"></p></li><li><p>映射完成后的效果</p><p><img src="/2022/09/11/Window%20SSH%20%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220911133814999.png" alt="image-20220911133814999"></p></li></ol><h2 id="SSH推荐"><a href="#SSH推荐" class="headerlink" title="SSH推荐"></a>SSH推荐</h2><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><ol><li><p>首先安装 Remote - SSH 插件</p><p><img src="/2022/09/11/Window%20SSH%20%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220911134920019.png" alt="image-20220911134920019"></p></li><li><p>点击左下角的远程窗口，选择 Connect to Host</p><p><img src="/2022/09/11/Window%20SSH%20%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220911135134685.png" alt="image-20220911135134685"></p></li><li><p>按照提示完成操作即可享受远程开发</p></li><li><p>效果图</p><p><img src="/2022/09/11/Window%20SSH%20%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220911135546681.png" alt="image-20220911135546681"></p></li></ol><h3 id="Jetbrains"><a href="#Jetbrains" class="headerlink" title="Jetbrains"></a>Jetbrains</h3><p>使用此远程开发，按照提示一路操作即可</p><p><img src="/2022/09/11/Window%20SSH%20%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220911135727217.png" alt="image-20220911135727217"></p>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Persim-M7 Ubuntu环境搭建(Docker)</title>
      <link href="/2022/09/11/Persim-M7%20Ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(Docker)/"/>
      <url>/2022/09/11/Persim-M7%20Ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(Docker)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先进行换源和docker安装，深圳这边华为云比较快，其他地区可以用阿里云</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo sed -i <span class="string">&#x27;s/archive.ubuntu.com/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo sed -i <span class="string">&#x27;s/security.ubuntu.com/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list</span></span><br><span class="line">sudo sed -i &#x27;s/archive.ubuntu.com/repo.huaweicloud.com/g&#x27; /etc/apt/sources.list</span><br><span class="line">sudo sed -i &#x27;s/security.ubuntu.com/repo.huaweicloud.com/g&#x27; /etc/apt/sources.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line">sudo docker pull ubuntu:20.04</span><br><span class="line">sudo docker run --name persim-m7 -itd ubuntu:20.04</span><br><span class="line">sudo docker exec -it persim-m7 /bin/bash</span><br></pre></td></tr></table></figure><p>在 docker 的 shell 中，执行以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sed -i &#x27;s/archive.ubuntu.com/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list</span></span><br><span class="line"><span class="comment"># sed -i &#x27;s/security.ubuntu.com/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list</span></span><br><span class="line">sed -i <span class="string">&#x27;s/archive.ubuntu.com/repo.huaweicloud.com/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sed -i <span class="string">&#x27;s/security.ubuntu.com/repo.huaweicloud.com/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install sudo apt-utils vim net-tools inetutils-ping wget curl tree lbzip2 bzip2 git xz-utils python3 python2 python3-pip scons telnet openssl libssl-dev</span><br><span class="line">apt-get install -qq libncurses5-dev lib32z1 &gt; /dev/null</span><br><span class="line">apt-get install u-boot-tools zlib1g-dev dosfstools mtools</span><br><span class="line">curl -s https://occ-oss-prod.oss-cn-hangzhou.aliyuncs.com/resource//1652757104469/Xuantie-900-gcc-elf-newlib-x86_64-V2.2.6-20220516.tar.gz | tar xzf - -C /opt</span><br><span class="line">vim /root/.bashrc</span><br></pre></td></tr></table></figure><p>在 vim 中补充以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> get_persim_m7=<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    export RTT_CC=gcc</span></span><br><span class="line"><span class="string">    export RTT_EXEC_PATH=/opt/Xuantie-900-gcc-elf-newlib-x86_64-V2.2.6/bin</span></span><br><span class="line"><span class="string">    export RTT_CC_PREFIX=riscv64-unknown-elf-</span></span><br><span class="line"><span class="string">    $RTT_EXEC_PATH/riscv64-unknown-elf-gcc --version</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /root/.bash_profile</span><br></pre></td></tr></table></figure><p>在 vim 中补充以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f .bashrc ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">source</span> .bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>以后只需执行 get_persim_m7 命令，即可获取环境变量，随后便可实现编译</p><p>配合 DockerFile 食用更佳，构建命令： <code>docker build -f ./dockerfile -t persim-m7:0.0 .</code></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">set</span> -x</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 换源</span></span><br><span class="line"><span class="comment"># RUN sed -i &#x27;s/archive.ubuntu.com/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list</span></span><br><span class="line"><span class="comment"># RUN sed -i &#x27;s/security.ubuntu.com/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/archive.ubuntu.com/repo.huaweicloud.com/g&#x27;</span> /etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/security.ubuntu.com/repo.huaweicloud.com/g&#x27;</span> /etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get upgrade -y</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y sudo apt-utils vim net-tools inetutils-ping wget curl tree lbzip2 bzip2 git xz-utils python3 python2 python3-pip scons telnet openssl libssl-dev</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=<span class="string">&quot;noninteractive&quot;</span> apt -y install tzdata</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> TZ=Asia/Shanghai &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -qq libncurses5-dev lib32z1 &gt; /dev/null</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y u-boot-tools zlib1g-dev dosfstools mtools</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -s https://occ-oss-prod.oss-cn-hangzhou.aliyuncs.com/resource//1652757104469/Xuantie-900-gcc-elf-newlib-x86_64-V2.2.6-20220516.tar.gz | tar xzf - -C /opt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot; alias get_persim_m7=&#x27;\n&quot;</span> &gt;&gt; /root/.bashrc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;     export RTT_CC=gcc\n&quot;</span> &gt;&gt; /root/.bashrc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;     export RTT_EXEC_PATH=/opt/Xuantie-900-gcc-elf-newlib-x86_64-V2.2.6/bin\n&quot;</span> &gt;&gt; /root/.bashrc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;     export RTT_CC_PREFIX=riscv64-unknown-elf-\n&quot;</span> &gt;&gt; /root/.bashrc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;     \$RTT_EXEC_PATH/riscv64-unknown-elf-gcc --version\n&quot;</span> &gt;&gt; /root/.bashrc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;&#x27;\n&quot;</span> &gt;&gt; /root/.bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;if test -f .bashrc ; then\n&quot;</span> &gt;&gt; /root/.bash_profile</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;    source .bashrc\n&quot;</span> &gt;&gt; /root/.bash_profile</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;fi\n&quot;</span> &gt;&gt; /root/.bash_profile</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt clean</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /var/lib/apt/lists/partial</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cat</span> /etc/issue</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> python3 -V</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> scons --version</span></span><br></pre></td></tr></table></figure><h2 id="VSCode配置文件"><a href="#VSCode配置文件" class="headerlink" title="VSCode配置文件"></a>VSCode配置文件</h2><p>launch.json</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;riscv-debug-bootloader&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/opt/Xuantie-900-gcc-elf-newlib-x86_64-V2.2.6/bin/riscv64-unknown-elf-gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;/software/bootloader/f133/rtthread.elf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;target remote localhost:1025&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;restore $&#123;workspaceRoot&#125;/software/bootloader/f133/rtthread.elf&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;set $pc=0x41000000&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;launchCompleteCommand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;None&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;riscv-debug-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/opt/Xuantie-900-gcc-elf-newlib-x86_64-V2.2.6/bin/riscv64-unknown-elf-gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;/software/firmware/f133/rtthread.elf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;target remote localhost:1025&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;restore $&#123;workspaceRoot&#125;/software/firmware/f133/rtthread.elf&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;set $pc=0x40000000&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;launchCompleteCommand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;None&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>tasks.json</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build_bootloader&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;export RTT_CC=gcc;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_EXEC_PATH=/opt/Xuantie-900-gcc-elf-newlib-x86_64-V2.2.6/bin;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_CC_PREFIX=riscv64-unknown-elf-;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;cd $&#123;workspaceFolder&#125;/software/bootloader/f133;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;scons -j8;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clean_bootloader&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;export RTT_CC=gcc;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_EXEC_PATH=/opt/Xuantie-900-gcc-elf-newlib-x86_64-V2.2.6/bin;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_CC_PREFIX=riscv64-unknown-elf-;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;cd $&#123;workspaceFolder&#125;/software/bootloader/f133;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;scons -c;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build_app&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;export RTT_CC=gcc;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_EXEC_PATH=/opt/Xuantie-900-gcc-elf-newlib-x86_64-V2.2.6/bin;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_CC_PREFIX=riscv64-unknown-elf-;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;cd $&#123;workspaceFolder&#125;/software/firmware/f133;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;scons -j8;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clean_app&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;export RTT_CC=gcc;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_EXEC_PATH=/opt/Xuantie-900-gcc-elf-newlib-x86_64-V2.2.6/bin;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_CC_PREFIX=riscv64-unknown-elf-;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;cd $&#123;workspaceFolder&#125;/software/firmware/f133;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;scons -c;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>使用 VSCode 一键编译</p><p>在SDK的根目录打开 VSCode，按下 F1，选择 Run Tasks，选择 build_app，即可编译。</p><p><img src="/2022/09/11/Persim-M7%20Ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(Docker)/image-20220917192215890.png" alt="image-20220917192215890"></p><p><img src="/2022/09/11/Persim-M7%20Ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(Docker)/image-20220917192248446.png" alt="image-20220917192248446"></p>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Persim-M3 Ubuntu环境搭建(Docker)</title>
      <link href="/2022/09/10/Persim-M3%20Ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(Docker)/"/>
      <url>/2022/09/10/Persim-M3%20Ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(Docker)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先进行换源和docker安装，深圳这边华为云比较快，其他地区可以用阿里云</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo sed -i <span class="string">&#x27;s/archive.ubuntu.com/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo sed -i <span class="string">&#x27;s/security.ubuntu.com/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list</span></span><br><span class="line">sudo sed -i &#x27;s/archive.ubuntu.com/repo.huaweicloud.com/g&#x27; /etc/apt/sources.list</span><br><span class="line">sudo sed -i &#x27;s/security.ubuntu.com/repo.huaweicloud.com/g&#x27; /etc/apt/sources.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line">sudo docker pull ubuntu:20.04</span><br><span class="line">sudo docker run --name persim-m3 -itd ubuntu:20.04</span><br><span class="line">sudo docker exec -it persim-m3 /bin/bash</span><br></pre></td></tr></table></figure><p>在 docker 的 shell 中，执行以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sed -i &#x27;s/archive.ubuntu.com/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list</span></span><br><span class="line"><span class="comment"># sed -i &#x27;s/security.ubuntu.com/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list</span></span><br><span class="line">sed -i <span class="string">&#x27;s/archive.ubuntu.com/repo.huaweicloud.com/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sed -i <span class="string">&#x27;s/security.ubuntu.com/repo.huaweicloud.com/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install sudo apt-utils vim net-tools inetutils-ping wget curl tree lbzip2 bzip2 git xz-utils python3 python2 python3-pip scons telnet</span><br><span class="line">apt-get install -qq libncurses5-dev lib32z1 &gt; /dev/null</span><br><span class="line">apt-get install u-boot-tools zlib1g-dev dosfstools mtools</span><br><span class="line">curl -s https://armkeil.blob.core.windows.net/developer//sitecore/shell/-/media/Files/downloads/gnu-rm/5_4-2016q3/gcc-arm-none-eabi-5_4-2016q3-20160926-linux,-d-,tar.bz2 | tar xjf - -C /opt</span><br><span class="line">curl -s https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/10-2020q4/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2 | tar xjf - -C /opt</span><br><span class="line">vim /root/.bashrc</span><br></pre></td></tr></table></figure><p>在 vim 中补充以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> get_persim_m3=<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    export RTT_ROOT=`pwd`/../rt-thread</span></span><br><span class="line"><span class="string">    export RTT_CC=gcc</span></span><br><span class="line"><span class="string">    export RTT_EXEC_PATH=/opt/gcc-arm-none-eabi-5_4-2016q3/bin</span></span><br><span class="line"><span class="string">    $RTT_EXEC_PATH/arm-none-eabi-gcc --version</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /root/.bash_profile</span><br></pre></td></tr></table></figure><p>在 vim 中补充以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f .bashrc ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">source</span> .bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>以后只需在文件的 scons 路径下执行 get_persim_m3 命令，即可获取环境变量，随后便可实现编译</p><p>配合 DockerFile 食用更佳，构建命令： <code>docker build -f ./dockerfile -t persim-m3:0.0 .</code></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">set</span> -x</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 换源</span></span><br><span class="line"><span class="comment"># RUN sed -i &#x27;s/archive.ubuntu.com/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list</span></span><br><span class="line"><span class="comment"># RUN sed -i &#x27;s/security.ubuntu.com/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/archive.ubuntu.com/repo.huaweicloud.com/g&#x27;</span> /etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/security.ubuntu.com/repo.huaweicloud.com/g&#x27;</span> /etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get upgrade -y</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y sudo apt-utils vim net-tools inetutils-ping wget curl tree lbzip2 bzip2 git xz-utils python3 python2 python3-pip scons telnet</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> DEBIAN_FRONTEND=<span class="string">&quot;noninteractive&quot;</span> apt -y install tzdata</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> TZ=Asia/Shanghai &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -qq libncurses5-dev lib32z1 &gt; /dev/null</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y u-boot-tools zlib1g-dev dosfstools mtools</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -s https://armkeil.blob.core.windows.net/developer//sitecore/shell/-/media/Files/downloads/gnu-rm/5_4-2016q3/gcc-arm-none-eabi-5_4-2016q3-20160926-linux,-d-,tar.bz2 | tar xjf - -C /opt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -s https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/10-2020q4/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2 | tar xjf - -C /opt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot; alias get_persim_m3=&#x27;\n&quot;</span> &gt;&gt; /root/.bashrc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;     export RTT_ROOT=`pwd`/../rt-thread\n&quot;</span> &gt;&gt; /root/.bashrc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;     export RTT_CC=gcc\n&quot;</span> &gt;&gt; /root/.bashrc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;     export RTT_EXEC_PATH=/opt/gcc-arm-none-eabi-5_4-2016q3/bin\n&quot;</span> &gt;&gt; /root/.bashrc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;     \$RTT_EXEC_PATH/arm-none-eabi-gcc --version\n&quot;</span> &gt;&gt; /root/.bashrc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;&#x27;\n&quot;</span> &gt;&gt; /root/.bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;if test -f .bashrc ; then\n&quot;</span> &gt;&gt; /root/.bash_profile</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;    source .bashrc\n&quot;</span> &gt;&gt; /root/.bash_profile</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">printf</span> <span class="string">&quot;fi\n&quot;</span> &gt;&gt; /root/.bash_profile</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt clean</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /var/lib/apt/lists/partial</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cat</span> /etc/issue</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> python3 -V</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> scons --version</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="VSCode配置文件"><a href="#VSCode配置文件" class="headerlink" title="VSCode配置文件"></a>VSCode配置文件</h2><p>launch.json</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arm-debug-bootloader&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/opt/gcc-arm-none-eabi-10-2020-q4-major/bin/arm-none-eabi-gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;/software/bootloader/rtthread.elf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;target remote localhost:3333&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;restore $&#123;workspaceRoot&#125;/software/bootloader/rtthread.elf&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;set $pc=0x81B00000&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;launchCompleteCommand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;None&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arm-debug-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/opt/gcc-arm-none-eabi-5_4-2016q3/bin/arm-none-eabi-gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;/software/firmware/rtthread.elf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;target remote localhost:3333&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;restore $&#123;workspaceRoot&#125;/software/firmware/rtthread.elf&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;set $pc=0x80000000&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;launchCompleteCommand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;None&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>tasks.json</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build_bootloader&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;export RTT_ROOT=`pwd`/software/rt-thread;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_CC=gcc;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_EXEC_PATH=/opt/gcc-arm-none-eabi-10-2020-q4-major/bin;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;cd $&#123;workspaceFolder&#125;/software/bootloader;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;scons -j8;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clean_bootloader&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;export RTT_ROOT=`pwd`/software/rt-thread;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_CC=gcc;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_EXEC_PATH=/gcc-arm-none-eabi-10-2020-q4-major/bin;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;cd $&#123;workspaceFolder&#125;/software/bootloader;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;scons -c;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build_app&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;export RTT_ROOT=`pwd`/software/rt-thread;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_CC=gcc;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_EXEC_PATH=/opt/gcc-arm-none-eabi-5_4-2016q3/bin;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;cd $&#123;workspaceFolder&#125;/software/firmware;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;scons -j8;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clean_app&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;export RTT_ROOT=`pwd`/software/rt-thread;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_CC=gcc;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;export RTT_EXEC_PATH=/opt/gcc-arm-none-eabi-5_4-2016q3/bin;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;cd $&#123;workspaceFolder&#125;/software/firmware;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;scons -c;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>使用 VSCode 一键编译</p><p>在SDK的根目录打开 VSCode，按下 F1，选择 Run Tasks，选择 build_app，即可编译。</p><p><img src="/2022/09/10/Persim-M3%20Ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(Docker)/image-20220917192322748.png" alt="image-20220917192322748"></p><p><img src="/2022/09/10/Persim-M3%20Ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(Docker)/image-20220917192349139.png" alt="image-20220917192349139"></p>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32-Linux环境搭建</title>
      <link href="/2021/09/17/ESP32-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/09/17/ESP32-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc git wget make flex bison gperf python python-pip python-setuptools python-serial python-cryptography python-future python-pyparsing python-pyelftools libffi-dev libssl-dev</span><br><span class="line">mkdir -p ~/Tool/esp</span><br><span class="line">cd ~/Tool/esp</span><br><span class="line">wget https://dl.espressif.com/dl/xtensa-esp32-elf-gcc8_4_0-esp-2021r1-linux-amd64.tar.gz #64位</span><br><span class="line">wget https://dl.espressif.com/dl/xtensa-esp32-elf-gcc8_4_0-esp-2021r1-linux-i686.tar.gz #32位</span><br><span class="line">tar -xzf xtensa-esp32-elf-gcc8_4_0-esp-2021r1-linux-amd64.tar.gz #64位</span><br><span class="line">tar -xzf xtensa-esp32-elf-gcc8_4_0-esp-2021r1-linux-i686.tar.gz #32位</span><br><span class="line">git clone --recursive https://github.com/espressif/esp-idf.git</span><br><span class="line">sudo vim  ~/.bashrc</span><br></pre></td></tr></table></figure><p>在 vim 中补充以下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias get_esp32=&#x27;</span><br><span class="line">export PATH=&quot;$HOME/Tool/esp/xtensa-esp32-elf/bin:$PATH&quot;</span><br><span class="line">export IDF_PATH=&quot;$HOME/Tool/esp/esp-idf&quot;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br><span class="line">get_esp32</span><br><span class="line">sudo apt install python-pip</span><br><span class="line">python -m pip install --user -r $IDF_PATH/requirements.txt</span><br></pre></td></tr></table></figure><p>此后，只需执行以下命令便能加载其环境了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br><span class="line">get_esp32</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32 </tag>
            
            <tag> linux </tag>
            
            <tag> esp-idf </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP8266-Linux环境搭建</title>
      <link href="/2021/09/17/ESP8266-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/09/17/ESP8266-Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="ESP8266-RTOS-SDK"><a href="#ESP8266-RTOS-SDK" class="headerlink" title="ESP8266_RTOS_SDK"></a>ESP8266_RTOS_SDK</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc git wget make libncurses-dev flex bison gperf python python-serial</span><br><span class="line">mkdir -p ~/Tool/esp</span><br><span class="line">cd ~/Tool/esp</span><br><span class="line">wget https://dl.espressif.com/dl/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz # 64位机</span><br><span class="line">wget https://dl.espressif.com/dl/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-i686.tar.gz # 32位机</span><br><span class="line">tar -xzf xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz # 64位机</span><br><span class="line">tar -xzf xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-i686.tar.gz # 32位机</span><br><span class="line">git clone --recursive https://github.com/espressif/ESP8266_RTOS_SDK.git</span><br><span class="line">sudo vim  ~/.bashrc</span><br></pre></td></tr></table></figure><p>在 vim 中补充以下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias get_esp8266_rtos=&#x27;</span><br><span class="line">export PATH=&quot;$HOME/Tool/esp/xtensa-lx106-elf/bin:$PATH&quot;</span><br><span class="line">export IDF_PATH=&quot;$HOME/Tool/esp/ESP8266_RTOS_SDK&quot;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br><span class="line">get_esp8266_rtos</span><br><span class="line">sudo apt install python-pip</span><br><span class="line">python -m pip install --user -r $IDF_PATH/requirements.txt</span><br></pre></td></tr></table></figure><p>此后，只需执行以下命令便能加载其环境了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br><span class="line">get_esp8266_rtos</span><br></pre></td></tr></table></figure><h2 id="ESP8266-NONOS-SDK"><a href="#ESP8266-NONOS-SDK" class="headerlink" title="ESP8266_NONOS_SDK"></a>ESP8266_NONOS_SDK</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc git wget make libncurses-dev flex bison gperf python python-serial</span><br><span class="line">mkdir -p ~/Tool/esp</span><br><span class="line">cd ~/Tool/esp</span><br><span class="line">wget https://dl.espressif.com/dl/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz # 64位机</span><br><span class="line">wget https://dl.espressif.com/dl/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-i686.tar.gz # 32位机</span><br><span class="line">tar -xzf xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz # 64位机</span><br><span class="line">tar -xzf xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-i686.tar.gz # 32位机</span><br><span class="line">git clone --recursive https://github.com/espressif/ESP8266_NONOS_SDK.git</span><br><span class="line">sudo vim  ~/.bashrc</span><br></pre></td></tr></table></figure><p>在 vim 中补充以下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias get_esp8266_nonos=&#x27;</span><br><span class="line">export PATH=&quot;$HOME/Tool/esp/xtensa-lx106-elf/bin:$PATH&quot;</span><br><span class="line">export IDF_PATH=&quot;$HOME/Tool/esp/ESP8266_NONOS_SDK&quot;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>此后，只需执行以下命令便能加载其环境了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br><span class="line">get_esp8266_nonos</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> esp8266 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AT24CXX系列读写算法</title>
      <link href="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/"/>
      <url>/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="AT24CXX容量"><a href="#AT24CXX容量" class="headerlink" title="AT24CXX容量"></a>AT24CXX容量</h2><p>​AT24C01，AT24C02，AT24C04，AT24C08，AT24C16，AT24C32，AT24C64，AT24C128，AT24C256…不同的xxx代表不同的容量。</p><table><thead><tr><th align="center">型号</th><th align="center">bit容量</th><th align="center">Byte容量</th></tr></thead><tbody><tr><td align="center">AT24C01</td><td align="center">1Kbit</td><td align="center">128Byte</td></tr><tr><td align="center">AT24C02</td><td align="center">2Kbit</td><td align="center">256Byte</td></tr><tr><td align="center">AT24C04</td><td align="center">4Kbit</td><td align="center">512Byte</td></tr><tr><td align="center">AT24C08</td><td align="center">8Kbit</td><td align="center">1024Byte</td></tr><tr><td align="center">AT24C16</td><td align="center">16Kbit</td><td align="center">2048Byte</td></tr><tr><td align="center">AT24C32</td><td align="center">32Kbit</td><td align="center">4096Byte</td></tr><tr><td align="center">AT24C64</td><td align="center">64Kbit</td><td align="center">8192Byte</td></tr><tr><td align="center">AT24C128</td><td align="center">128Kbit</td><td align="center">16384Byte</td></tr><tr><td align="center">AT24C256</td><td align="center">256Kbit</td><td align="center">32768Byte</td></tr><tr><td align="center">AT24C512</td><td align="center">512Kbit</td><td align="center">65536Byte</td></tr><tr><td align="center">AT24C1024</td><td align="center">1024Kbit</td><td align="center">131072Byte</td></tr></tbody></table><h2 id="AT24CXX页与页内单元"><a href="#AT24CXX页与页内单元" class="headerlink" title="AT24CXX页与页内单元"></a>AT24CXX页与页内单元</h2><p>​总容量(Byte容量) &#x3D; 页数 × 页内字节单元数。</p><table><thead><tr><th align="center">AT24CXXX</th><th align="center">Byte容量</th><th align="center">页数</th><th align="center">页内字节单元数</th></tr></thead><tbody><tr><td align="center">AT24C01</td><td align="center">128Byte</td><td align="center">16页</td><td align="center">8Byte</td></tr><tr><td align="center">AT24C02</td><td align="center">256Byte</td><td align="center">32页</td><td align="center">8Byte</td></tr><tr><td align="center">AT24C04</td><td align="center">512Byte</td><td align="center">32页</td><td align="center">16Byte</td></tr><tr><td align="center">AT24C08</td><td align="center">1024Byte</td><td align="center">64页</td><td align="center">16Byte</td></tr><tr><td align="center">AT24C16</td><td align="center">2048Byte</td><td align="center">128页</td><td align="center">16Byte</td></tr><tr><td align="center">AT24C32</td><td align="center">4096Byte</td><td align="center">128页</td><td align="center">32Byte</td></tr><tr><td align="center">AT24C64</td><td align="center">8192Byte</td><td align="center">256页</td><td align="center">32Byte</td></tr><tr><td align="center">AT24C128</td><td align="center">16384Byte</td><td align="center">256页</td><td align="center">64Byte</td></tr><tr><td align="center">AT24C256</td><td align="center">32768Byte</td><td align="center">512页</td><td align="center">64Byte</td></tr><tr><td align="center">AT24C512</td><td align="center">65536Byte</td><td align="center">512页</td><td align="center">128Byte</td></tr><tr><td align="center">AT24C1024</td><td align="center">131072Byte</td><td align="center">512页</td><td align="center">256Byte</td></tr></tbody></table><h2 id="AT24CXX寻址方式"><a href="#AT24CXX寻址方式" class="headerlink" title="AT24CXX寻址方式"></a>AT24CXX寻址方式</h2><blockquote><p>不是IIC地址，是存储器内部寻址</p></blockquote><p>​对AT24CXXX进行读写操作时，都得先访问存储地址、比如AT24C01写一个字节的IIC时序：</p><p><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515212712435.png" alt="image-20210515212712435"></p><p>​先发送设备地址，收到应答后再发送需要写数据的地址(<strong>WORD ADDRESS</strong>)。AT24C01容量为128Byte则<strong>WORD ADDRESS</strong>只需要7bit就可以覆盖128Byte的数据地址。通俗的讲就是128Byte就占用了128个地址，一个7bit的数据范围为(0-127)刚好128，所以128Byte的字节地址需要一个7bit的数据来表示。<br>AT24CXXX 字节地址如下(*表示无效位):</p><table><thead><tr><th align="center">AT24CXXX</th><th align="center">页数</th><th align="center">页内字节单元数</th><th align="center">容量(Byte)</th><th align="center">WORD ADDRESS(占用bit数)</th><th align="center">WORD ADDRESS</th></tr></thead><tbody><tr><td align="center">AT24C01</td><td align="center">16页</td><td align="center">8Byte</td><td align="center">128Byte</td><td align="center">7bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515223134590.png" alt="image-20210515223134590"></td></tr><tr><td align="center">AT24C02</td><td align="center">32页</td><td align="center">8Byte</td><td align="center">256Byte</td><td align="center">8bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515223108768.png" alt="image-20210515223108768"></td></tr><tr><td align="center">AT24C04</td><td align="center">32页</td><td align="center">16Byte</td><td align="center">512Byte</td><td align="center">9bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222957329.png" alt="image-20210515222957329"></td></tr><tr><td align="center">AT24C08</td><td align="center">64页</td><td align="center">16Byte</td><td align="center">1024Byte</td><td align="center">10bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222919062.png" alt="image-20210515222919062"></td></tr><tr><td align="center">AT24C16</td><td align="center">128页</td><td align="center">16Byte</td><td align="center">2048Byte</td><td align="center">11bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222847226.png" alt="image-20210515222847226"></td></tr><tr><td align="center">AT24C32</td><td align="center">128页</td><td align="center">32Byte</td><td align="center">4096Byte</td><td align="center">12bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222744553.png" alt="image-20210515222744553"></td></tr><tr><td align="center">AT24C64</td><td align="center">256页</td><td align="center">32Byte</td><td align="center">8192Byte</td><td align="center">13bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222708886.png" alt="image-20210515222708886"></td></tr><tr><td align="center">AT24C128</td><td align="center">256页</td><td align="center">64Byte</td><td align="center">16384Byte</td><td align="center">14bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222504947.png" alt="image-20210515222504947"></td></tr><tr><td align="center">AT24C256</td><td align="center">512页</td><td align="center">64Byte</td><td align="center">32768Byte</td><td align="center">15bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222424735.png" alt="image-20210515222424735"></td></tr><tr><td align="center">AT24C512</td><td align="center">512页</td><td align="center">128Byte</td><td align="center">65536Byte</td><td align="center">16bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222327337.png" alt="image-20210515222327337"></td></tr><tr><td align="center">AT24C1024</td><td align="center">512页</td><td align="center">256Byte</td><td align="center">131072Byte</td><td align="center">17bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222037349.png" alt="image-20210515222037349"></td></tr></tbody></table><h2 id="AT24CXX页地址与页内单元地址"><a href="#AT24CXX页地址与页内单元地址" class="headerlink" title="AT24CXX页地址与页内单元地址"></a>AT24CXX页地址与页内单元地址</h2><p>​比如AT24C256有512页每页64个字节，15bit的地址数据对其寻址，低6bit(D5-D0)为页内字节单元地址，高9bit(D14-D6)为页地址。</p><p>​如第16页开始写，则<strong>WORD ADDRESS</strong> &#x3D; 0x0400（000 0100 0000 0000)<br>​<strong>0</strong>：地址无效位<br>​<strong>000 0100 00</strong>：9位页地址<br>​<strong>00 0000</strong>：6位页内字节单元地址</p><p>页地址与页内偏移地址的关系如下图。</p><table><thead><tr><th align="center">AT24CXXX</th><th align="center">页数</th><th align="center">页内字节单元数</th><th align="center">容量(Byte)</th><th align="center">WORD ADDRESS(占用bit数)</th><th align="center">页地址|页内偏移地址</th></tr></thead><tbody><tr><td align="center">AT24C01</td><td align="center">16页</td><td align="center">8Byte</td><td align="center">128Byte</td><td align="center">7bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515223134590.png" alt="image-20210515223134590"></td></tr><tr><td align="center">AT24C02</td><td align="center">32页</td><td align="center">8Byte</td><td align="center">256Byte</td><td align="center">8bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515223108768.png" alt="image-20210515223108768"></td></tr><tr><td align="center">AT24C04</td><td align="center">32页</td><td align="center">16Byte</td><td align="center">512Byte</td><td align="center">9bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222957329.png" alt="image-20210515222957329"></td></tr><tr><td align="center">AT24C08</td><td align="center">64页</td><td align="center">16Byte</td><td align="center">1024Byte</td><td align="center">10bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222919062.png" alt="image-20210515222919062"></td></tr><tr><td align="center">AT24C16</td><td align="center">128页</td><td align="center">16Byte</td><td align="center">2048Byte</td><td align="center">11bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222847226.png" alt="image-20210515222847226"></td></tr><tr><td align="center">AT24C32</td><td align="center">128页</td><td align="center">32Byte</td><td align="center">4096Byte</td><td align="center">12bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222744553.png" alt="image-20210515222744553"></td></tr><tr><td align="center">AT24C64</td><td align="center">256页</td><td align="center">32Byte</td><td align="center">8192Byte</td><td align="center">13bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222708886.png" alt="image-20210515222708886"></td></tr><tr><td align="center">AT24C128</td><td align="center">256页</td><td align="center">64Byte</td><td align="center">16384Byte</td><td align="center">14bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222504947.png" alt="image-20210515222504947"></td></tr><tr><td align="center">AT24C256</td><td align="center">512页</td><td align="center">64Byte</td><td align="center">32768Byte</td><td align="center">15bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222424735.png" alt="image-20210515222424735"></td></tr><tr><td align="center">AT24C512</td><td align="center">512页</td><td align="center">128Byte</td><td align="center">65536Byte</td><td align="center">16bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222327337.png" alt="image-20210515222327337"></td></tr><tr><td align="center">AT24C1024</td><td align="center">512页</td><td align="center">256Byte</td><td align="center">131072Byte</td><td align="center">17bit</td><td align="center"><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515222037349.png" alt="image-20210515222037349"></td></tr></tbody></table><p>比如：</p><p>​<strong>AT24C01</strong>：</p><p>​16页：需要4bit寻址(2^4&#x3D;16)。</p><p>​8Byte：需要3bit寻址(2^3&#x3D;8)。</p><p>查看手册</p><p>​<strong>AT24C01</strong>字节寻址需一个7bit地址：</p><p><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515223533498.png" alt="image-20210515223533498"></p><p>​<strong>AT24C128</strong>字节寻址需一个14bit地址：</p><p><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515223654431.png" alt="image-20210515223654431"></p><p>​<strong>AT24C256</strong>字节寻址需一个15bit地址：</p><p><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515223815200.png" alt="image-20210515223815200"></p><p>​以此类推，其实就是上面总结的那张表。</p><h2 id="AT24CXX-IIC地址"><a href="#AT24CXX-IIC地址" class="headerlink" title="AT24CXX IIC地址"></a>AT24CXX IIC地址</h2><p>​IIC通信需要先向从设备发送设备地址，AT24CXX芯片上有A2、A1、A0引脚，通过这三个引脚我们就可以自定义AT24CXX芯片的通信地址。</p><p><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515224030810.png" alt="image-20210515224030810"></p><p>​地址构成如下(手册上都会有写)，比如A2、A1、A0接地，则IIC写地址为1010 0000（0xA0），读地址为1010 0001（0xA1）。当然，地址详情还是需要根据<strong>Datasheet</strong>来进行判断。</p><p><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515224250520.png" alt="image-20210515224250520"></p><h2 id="AT24CXX-数据的读写"><a href="#AT24CXX-数据的读写" class="headerlink" title="AT24CXX 数据的读写"></a>AT24CXX 数据的读写</h2><h3 id="按字节写"><a href="#按字节写" class="headerlink" title="按字节写"></a>按字节写</h3><p><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515212712435.png" alt="image-20210515212712435"></p><h3 id="按页写"><a href="#按页写" class="headerlink" title="按页写"></a>按页写</h3><p><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515224836911.png" alt="image-20210515224836911"></p><p>​示例：<br>​<img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515225034409.png" alt="image-20210515225034409"></p><p>​内容为：给<strong>AT24C04</strong>的最后的两个字节里面写入<strong>0x54</strong>和<strong>0x53</strong>。</p><hr><p>​注意：<br>  往AT24CXXX中写数据时，每写一个Byte的数据页内地址+1，当前页写满后会重新覆盖掉这一页前面的数据，而不会自动跳转到下一页，但是读会自动翻页。</p><p><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515225558292.png" alt="image-20210515225558292"></p><h3 id="翻页写"><a href="#翻页写" class="headerlink" title="翻页写"></a>翻页写</h3><p>​翻页写其实就是执行一次下面的时序，也就是发送一次从机设备和字节地址最大就可以写入64字节的数据，如果要连写多页，就重新按照以下时序发送从机地址和字节地址。</p><p><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515225753490.png" alt="image-20210515225753490"></p><p>​即写满一页之后，还是需要手动翻页的，但是不需要重发<strong>Start</strong>和<strong>Stop</strong>了；</p><h3 id="按字节读"><a href="#按字节读" class="headerlink" title="按字节读"></a>按字节读</h3><p><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515230405346.png" alt="image-20210515230405346"></p><h3 id="顺序读"><a href="#顺序读" class="headerlink" title="顺序读"></a>顺序读</h3><p><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515230416559.png" alt="image-20210515230416559"></p><h3 id="随机读"><a href="#随机读" class="headerlink" title="随机读"></a>随机读</h3><p><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515230438061.png" alt="image-20210515230438061"></p><p>​示例：</p><p><img src="/2021/05/15/AT24CXX%E7%B3%BB%E5%88%97%E8%AF%BB%E5%86%99%E7%AE%97%E6%B3%95/image-20210515230935593.png" alt="image-20210515230935593"></p><p>内容为：读取<strong>AT24C04</strong>的最后的两个字节，内容为<strong>0x54</strong>和<strong>0x53</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 芯片驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iic </tag>
            
            <tag> at24cxx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keil踩坑指南</title>
      <link href="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/"/>
      <url>/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="Keil-Jlink闪退"><a href="#Keil-Jlink闪退" class="headerlink" title="Keil-Jlink闪退"></a>Keil-Jlink闪退</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Jlink版本和Keil的版本都过高，且由于Jlink为盗版，导致闪退。</p><p>具体为<strong>JLinkARM.dll</strong>这个插件搞鬼。</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/204450uuy2lquzqy2ysiuq.png" alt="204450uuy2lquzqy2ysiuq"></p><p>这个插件的来源为</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/2101134fursl3bf4fbzavf.png" alt="2101134fursl3bf4fbzavf"></p><p>也就是我们装Jlink驱动的时候，勾选了这个选项，而导致这个毒瘤插件进入Keil，以后安装插件的时候取消安装就可以了。</p><h3 id="解决措施"><a href="#解决措施" class="headerlink" title="解决措施"></a>解决措施</h3><ol><li><p>找到”Keil安装目录“\ARM\Segger</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511164245801.png" alt="image-20210511164245801"></p></li><li><p>下载老版Keil的驱动：<a href="https://xqyjlj.lanzoui.com/b0axo4dte">https://xqyjlj.lanzoui.com/b0axo4dte</a> ；密码:g1h7</p></li><li><p>将里面的驱动解压替换现在的驱动，重启Keil就可以解决了。</p></li></ol><h2 id="Cannot-load-driver-‘C-Keil-v5-ARM-Segger-JL2CM3-dll"><a href="#Cannot-load-driver-‘C-Keil-v5-ARM-Segger-JL2CM3-dll" class="headerlink" title="Cannot load driver ‘C:\Keil_v5\ARM\Segger\JL2CM3.dll"></a>Cannot load driver ‘C:\Keil_v5\ARM\Segger\JL2CM3.dll</h2><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511171003731.png" alt="image-20210511171003731"></p><h3 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h3><p>Jlink版本和Keil的版本都过高，且由于Jlink为盗版，导致闪退。</p><p>具体为<strong>JLinkARM.dll</strong>这个插件搞鬼。</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/204450uuy2lquzqy2ysiuq.png" alt="204450uuy2lquzqy2ysiuq"></p><p>这个插件的来源为</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/2101134fursl3bf4fbzavf.png" alt="2101134fursl3bf4fbzavf"></p><p>也就是我们装Jlink驱动的时候，勾选了这个选项，而导致这个毒瘤插件进入Keil，以后安装插件的时候取消安装就可以了。</p><h3 id="解决措施-1"><a href="#解决措施-1" class="headerlink" title="解决措施"></a>解决措施</h3><ol><li><p>找到”Keil安装目录“\ARM\Segger</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511164245801.png" alt="image-20210511164245801"></p></li><li><p>下载老版Keil的驱动：<a href="https://xqyjlj.lanzoui.com/b0axo4dte">https://xqyjlj.lanzoui.com/b0axo4dte</a> ；密码:g1h7</p></li><li><p>将里面的驱动解压替换现在的驱动，重启Keil就可以解决了。</p></li></ol><h2 id="Keil-使用-Astyle-自动格式化"><a href="#Keil-使用-Astyle-自动格式化" class="headerlink" title="Keil 使用 Astyle 自动格式化"></a>Keil 使用 Astyle 自动格式化</h2><h3 id="关于Astyle"><a href="#关于Astyle" class="headerlink" title="关于Astyle"></a>关于Astyle</h3><p>Astyle 的全称是Artistic Style的简称，是一个开源的源代码格式化工具，可以对C，C++，C#以及Java等编程语言的源代码进行缩进、格式化、美化。</p><p><strong>Home Page</strong>: <a href="http://astyle.sourceforge.net/">http://astyle.sourceforge.net/</a><br><strong>Project Page</strong>: <a href="http://sourceforge.net/projects/astyle/">http://sourceforge.net/projects/astyle/</a></p><h3 id="Astyle下载"><a href="#Astyle下载" class="headerlink" title="Astyle下载"></a>Astyle下载</h3><p><a href="https://sourceforge.net/projects/astyle/">https://sourceforge.net/projects/astyle/</a></p><p><a href="https://xqyjlj.lanzoui.com/b0axo50yh">https://xqyjlj.lanzoui.com/b0axo50yh</a> 密码:69tj</p><p>下载之后解压，推荐解压到Keil的安装目录，避免误删除。</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511200057051.png" alt="image-20210511200057051"></p><h3 id="创建菜单按钮"><a href="#创建菜单按钮" class="headerlink" title="创建菜单按钮"></a>创建菜单按钮</h3><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511195813214.png" alt="image-20210511195813214"></p><ol><li><p>创建应用 <strong>Astyle All</strong></p></li><li><p>选择<strong>Astyle</strong>路径</p></li><li><p>添加参数</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;$E*.c&quot; &quot;$E*.h&quot; --style=allman --indent=spaces=4 --indent-preproc-block --pad-header --pad-oper --unpad-paren --suffix=none --lineend=linux --convert-tabs --align-pointer=type --verbose</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;$E*.c&quot; &quot;$E*.h&quot; ##当前目录下所有的.c .h文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--style=allman</span><br><span class="line">--indent=spaces=4</span><br><span class="line">--indent-preproc-block</span><br><span class="line">--pad-header</span><br><span class="line">--pad-oper</span><br><span class="line">--unpad-paren</span><br><span class="line">--suffix=none</span><br><span class="line">--lineend=linux</span><br><span class="line">--convert-tabs</span><br><span class="line">--align-pointer=type</span><br><span class="line">--verbose</span><br></pre></td></tr></table></figure><p>此为Astyle命令，具体含义请移步 <a href="http://astyle.sourceforge.net/astyle.html">http://astyle.sourceforge.net/astyle.html</a></p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511202934229.png" alt="image-20210511202934229"></p></li><li><p>按下OK后，tool下就有以下按钮</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511202956867.png" alt="image-20210511202956867"></p></li><li><p>按下按钮之后，启动自动格式化（需要先保存文件）。</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511203057315.png" alt="image-20210511203057315"></p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511203144916.png" alt="image-20210511203144916"></p></li><li><p>再增加一个应用<strong>Astyle Current</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!E --style=allman --indent=spaces=4 --indent-preproc-block --pad-header --pad-oper --unpad-paren --suffix=none --lineend=linux --convert-tabs --align-pointer=type --verbose</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!E    ##当前文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--style=allman</span><br><span class="line">--indent=spaces=4</span><br><span class="line">--indent-preproc-block</span><br><span class="line">--pad-header</span><br><span class="line">--pad-oper</span><br><span class="line">--unpad-paren</span><br><span class="line">--suffix=none</span><br><span class="line">--lineend=linux</span><br><span class="line">--convert-tabs</span><br><span class="line">--align-pointer=type</span><br><span class="line">--verbose</span><br></pre></td></tr></table></figure><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511203208095.png" alt="image-20210511203208095"></p></li></ol><h2 id="Keil字体"><a href="#Keil字体" class="headerlink" title="Keil字体"></a>Keil字体</h2><p>   Keil默认字体本身不怎么好看。本人提供一些字体供大家下载。首选<strong>JetBrains Mono</strong>吧。<strong>Consolas YaHei hybrid</strong>要改设置，比较繁琐。</p><h3 id="JetBrains-Mono"><a href="#JetBrains-Mono" class="headerlink" title="JetBrains Mono"></a>JetBrains Mono</h3><ul><li><p>字体地址 ：<a href="https://www.jetbrains.com/lp/mono/">https://www.jetbrains.com/lp/mono/</a></p></li><li><p>安装方式</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511205514357.png" alt="image-20210511205514357"></p></li><li><p>字体预览</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511204632463.png" alt="image-20210511204632463"></p></li><li><p>下载地址</p><ul><li><a href="https://download.jetbrains.com/fonts/JetBrainsMono-2.225.zip?_ga=2.243489413.18516330.1620736840-1147192159.1615307884">https://download.jetbrains.com/fonts/JetBrainsMono-2.225.zip?_ga=2.243489413.18516330.1620736840-1147192159.1615307884</a></li><li><a href="https://xqyjlj.lanzoui.com/b0axo56va">https://xqyjlj.lanzoui.com/b0axo56va</a> 密码:38vm</li></ul></li></ul><h3 id="Consolas-YaHei-hybrid"><a href="#Consolas-YaHei-hybrid" class="headerlink" title="Consolas YaHei hybrid"></a>Consolas YaHei hybrid</h3><ul><li><p>安装方式</p><ul><li><p>打开Keil安装目录下的uv4文件夹，找到<strong>global.prop</strong>文件</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511205945676.png" alt="image-20210511205945676"></p></li><li><p>将font属性修改为<strong>Consolas YaHei hybrid</strong></p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511210310839.png" alt="image-20210511210310839"></p></li></ul></li><li><p>字体预览</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511210347828.png" alt="image-20210511210347828"></p></li><li><p>下载地址： <a href="https://xqyjlj.lanzoui.com/b0axo56va">https://xqyjlj.lanzoui.com/b0axo56va</a> 密码:38vm</p></li></ul><h2 id="Keil设置"><a href="#Keil设置" class="headerlink" title="Keil设置"></a>Keil设置</h2><ul><li><p>编码：首选<strong>UTF-8</strong> （较高版本才会有）</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511210651302.png" alt="image-20210511210651302"></p></li><li><p>Tab大小：4</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511210741741.png" alt="image-20210511210741741"></p></li><li><p>自动补全</p><p><img src="/2021/05/11/Keil%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/image-20210511210821032.png" alt="image-20210511210821032"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> keil </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
